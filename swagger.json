{
  "openapi": "3.0.1",
  "info": {
    "title": "Fulfiller Api",
    "description": "# Introduction\r\n\r\nJTL-FFN is a standardized interface for fulfillment service providers and their customers. Fulfiller can offer their services to merchants and merchants can respectively choose from a wide range of service providers according to their needs.\r\n\r\n## The ecosystem\r\n\r\nThe FFN network consists of this REST API, an online portal and third party integrations (JTL-Wawi being one of them). The REST API orchestrates the interactions between the participants and the portal website provides services by JTL (such as managing and certifying warehouses of a fulfiller and merchants searching for their service providers).\r\n\r\n## About this API\r\n\r\nThe base url of this api is [https://ffn2.api.jtl-software.com/api](https://ffn2.api.jtl-software.com/api). \r\n\r\nThis API (and this documentation) consists of three parts:\r\n* Fulfiller API     - operations used when acting as a fulfiller in the network. Only users with the role `Fulfiller` can access these endpoints.\r\n* Merchant API      - operations used when acting as a merchant in the network. Only users with the role `Merchant` can access these endpoints.\r\n* Shared API        - operations available to all users.\r\n\r\nPlease use the navigation menu at the top to switch between the documentation for the different APIs.\r\n \r\n\n# OAuth\r\n\r\nThe FFN-API uses [OAuth2](https://tools.ietf.org/html/rfc6749) with the [Authorization Code Grant](https://tools.ietf.org/html/rfc6749#section-4.1) for its endpoints. Users must have an active [JTL customer center](https://kundencenter.jtl-software.de) account to authorize against the OAuth2 server. Applications and services using the API must acquire client credentials from JTL.\r\n\r\n## Application credentials\r\n\r\nWhen making calls against the API, you need to do it in the context of an application. You will get the credentials for your application from JTL.\r\n\r\nApplication credentials consist of the following:\r\n* `client_id`       - uniquely identifies your application\r\n* `client_secret`   - secret used to authenticate your application\r\n* `callback_uri`    - the uri the OAuth2 server redirect to on authorization requests\r\n\r\n## Requesting authorization\r\n\r\nWhen you want to authorize a user you redirect him to\r\n`https://oauth2.api.jtl-software.com/authorize`\r\nwith the following query string parameters:\r\n* `response_type`   - Must be set to \"code\" for the [Authorization Code Grant](https://tools.ietf.org/html/rfc6749#section-4.1).\r\n* `redirect_uri`    - After the user accepts your authorization request this is the url that will be redirected to. It must match the `callback_uri` in your client credentials.\r\n* `client_id`       - Your applications identifier from your application credentials.\r\n* `scope`           - The scopes you wish to authorize (space delimited).\r\n* `state`           - An opaque value that will be included when redirecting back after the user accepts the authorisation. This is not required, but is important for [security considerations](http://www.thread-safe.com/2014/05/the-correct-use-of-state-parameter-in.html).\r\n\r\nAfter successful authorization by the user, the OAuth2 server will redirect back to your applications callback with the following query string parameters:\r\n* `code`    - The authorization code.\r\n* `state`   - The state parameter that was sent in the request.\r\n\r\n## Verifying authorization\r\n\r\nThe authorization code you acquired in the last step will now be exchanged for an access token. In order to do this you need to POST a request to `https://oauth2.api.jtl-software.com/token`.\r\n\r\n>POST <https://oauth2.api.jtl-software.com/token>\r\n>\r\n>Authorization: Basic `application_basic_auth`\\\r\n>Content-Type: application/x-www-form-urlencoded\r\n>\r\n>grant_type=authorization_code&code=`code`&redirect_uri=`redirect_uri`\r\n\r\nIn the Authorization header [Basic HTTP authentication](https://tools.ietf.org/html/rfc7617) is used. Your application credentials `client_id` will be used as the username and your `client_secret` as the password. The header should have the value \"Basic\" plus the Base64 encoded string comprising of `client_id:client_secret`.\r\n\r\nThe body of the request consist of the form encoded parameters:\r\n* `grant_type`   - Must be set to \"authorization_code\".\r\n* `code`         - The authorization code received from the previous step.\r\n* `redirect_uri` - Must match the `callback_uri` in your client credentials.\r\n\r\nA successful verification request will return a JSON response with the properties:\r\n* `token_type`      - is always \"Bearer\"\r\n* `expires_in`      - the time in seconds until the access token will expire\r\n* `access_token`    - the access token used for API requests\r\n* `refresh_token`   - token used to get a new access_token without needing to ask the user again\r\n\r\nNow the APIs endpoints that need authorization can be called by setting the header\r\n>Authorization: Bearer `access_token`\r\n\r\n## Refreshing authorization\r\n\r\nTo get a new `access_token` (for example when the old one expired) one can POST a request to `https://oauth2.api.jtl-software.com/token`.\r\n\r\n>POST <https://oauth2.api.jtl-software.com/token>\r\n>\r\n>Authorization: Basic `application_basic_auth`\\\r\n>Content-Type: application/x-www-form-urlencoded\r\n>\r\n>grant_type=refresh_token&refresh_token=`refresh_token`\r\n\r\nThe Basic HTTP Authorization works exactly as in the verification step.\r\n\r\nThe body of the request consist of the form encoded parameters:\r\n* `grant_type`      - Must be set to \"refresh_token\".\r\n* `refresh_token`   - The `refresh_token` you acquired during verification.\r\n\r\nThe response will be the same as in the verification step.\r\n\r\n## Scopes\r\n\r\nScopes allow fine grained control over what actions are allowed for a given application. During login users must approve the requested scopes, so it is often feasible to limit asking for permissions your application really needs.\r\n\r\nGlobal scopes for common permission scenarios are the following:\r\n* `ffn.fulfiller.read`  - full read access for the fulfiller API\r\n* `ffn.fulfiller.write` - full write access for the fulfiller API\r\n* `ffn.merchant.read`   - full read access for the merchant API\r\n* `ffn.merchant.write`  - full write access for the merchant API\r\n\r\nMore fine grained scopes can be acquired from each respective endpoints documentation.\r\n\r\n## Example\r\n\r\n\r\n\r\n### Prerequsites\r\n\r\n* JTL Customer center account (https://kundencenter.jtl-software.de/)\r\n* cUrl (https://curl.se/)\r\n* FFN portal account (just login here: https://fulfillment.jtl-software.com)\r\n* FFN portal sandbox account (if you want to test on sandbox: https://fulfillment-sandbox.jtl-software.com)\r\n* Oauth Client for authorization and define scopes\r\n\r\n\r\nValues in this example (access_token, refresh_token, code...) are expired and cannot be used verbatim.\r\n\r\n### Step 1 - Create an OAuth client\r\n\r\nNavigate to https://kundencenter.jtl-software.de/oauth and create a new OAuth client.\r\n(You canÂ´t navigate to Oauth in customer account, you should use this link, or you can change logged in  index to oauth)\r\n\r\n\r\n!Templates define what scopes are possible for this client.\r\n\r\nscopes with access rights:\r\n\r\n* ffn.merchant.read - full read access for the fulfiller API\r\n* ffn.merchant.write - full write access for the fulfiller API\r\n* ffn.fulfiller.read  - full read access for the merchant API\r\n* ffn.fulfiller.write - full write access for the merchant API\r\n\r\nMore fine grained scopes can be acquired from each respective endpoints documentation.\r\n\r\n![Client Scopes](img/oauth//scopesClient1.png)\r\n\r\nOverview: clients, scopes, client-secret and client-id\r\n\r\n![Oauth Clients](img/oauth//ClientSecretScopes1.png)\r\n\r\nIn our example:\r\n\r\n* client_id: 97170e65-d390-4633-ba46-d6ghef8222de\r\n* client_secret: f364ldUw3wGJFGn3JXE2NpGdCvUSMlmK72gsYg1z\r\n* redirect_uri: http://localhost:53972/ffn/sso\r\n\r\nThe values for this client should not be used in production and are for testing only.\r\n\r\n### Step 2 - User login\r\n\r\nIn this step you will redirect the user to the JTL OAuth website using his default browser. Here the user will provide his username/password and accept the requested scopes. Finally the JTL Oauth website will redirect to the provided redirect_uri and provide the code.\r\n\r\nTemplate: authorize specified scopes and get code answer to request the access token\r\n\r\n```\r\nhttps://oauth2.api.jtl-software.com/authorize?response_type=code&redirect_uri=[redirect_uri]&client_id=[client_id]&scope=[scopes]\r\n```\r\n\r\nNote: the scopes should be seperated by spaces or %20\r\n\r\nFilled with our example values:\r\n\r\n```\r\nhttps://oauth2.api.jtl-software.com/authorize?response_type=code&redirect_uri=http://localhost:53972/ffn/sso/oauth&client_id=97170e65-d390-4633-ba46-d6ghef8222de&scope=ffn.merchant.read%20ffn.merchant.write\r\n```\r\n\r\n\r\n\r\n* enter password \r\n\r\n![Sandbox Login](img/oauth/SandboxLogin.png)\r\n\r\n\r\n* authorize scopes \r\n\r\n![Authorize Scopes](img/oauth/authorizeScopes.png)\r\n\r\n* code answer from server\r\n\r\n![Antwort mit Code](img/oauth/answer_with_code.png)\r\n\r\nExample of the answer from the OAuth server to our redirect_uri:\r\n\r\n```\r\nhttp://localhost:53972/ffn/sso?code=def50200f3ac7aabbb6e82a6b131874115b858549dab62e73c68ea21a03de59b5744dc0f0ee321d7607062cf9bfa57471cd0ee7572db1d7b0a15779b0dda7d0ed8f8bfdb0f69939a34678d67aee41e4849d355d8aa223733ab1f397280b205fa739c6252d77d9ff600136e1b744352115fd62ba1035d8da4cbc1b6791c61d0bb621952b0a14625dd75807113ea0746e35528c304a8ce3c06724c1e1d9e1cb3709e9f52778bc8ca5b2d8f7c055f14244b1f8fcb61554c5bf48e02b882b87b9a76a43579eecd578cec97c6f603907e282e45cfec43837c063dc36b556d4974776a942f47cee19023e130ae852bfca6d3ca9c7cb3283d2bc4971f80651b626f8e7ba0ec2d13dddc4c528e1f3e470de907af7eb304d781534dd9b071d9760c9890e5756893c7800589c407bd2da3a2ff56c3fb15a410e24aa2df7ac54e8d0f7445e38e390171b58a0b66b337057d59acd29ed5bbc4df6bee921b244f030c86f49bcae21c9ca77c05eea0094414803f30089c39d585bf83604a2d9bbcc6442fbfdcff6cca946eb84d1eac2e4f98dff31a93460c951c853f9ef7140f572be963e82a3baf72afba34572af63ee7da\r\n```\r\n\r\nExtract the code and note it for next steps.\r\n\r\n### Step 3 - Get an access_token from the code\r\n\r\nTemplate: get access token + refresh token\r\n\r\n```\r\ncurl --location --request POST \"https://oauth2.api.jtl-software.com/token\"\r\n    --header \"Content-Type: application/x-www-form-urlencoded\" \r\n    -u \"[client_id]:[client_secret]\"\r\n    --data-urlencode \"grant_type=authorization_code\" \r\n    --data-urlencode \"redirect_uri=[redirect_uri]\"\r\n    --data-urlencode \"code=[code]\" \r\n```\r\n\r\nFilled with our example values:\r\n\r\n```\r\ncurl --location --request POST \"https://oauth2.api.jtl-software.com/token\"\r\n    --header \"Content-Type: application/x-www-form-urlencoded\" \r\n    -u \"97170e64-d390-4696-ba46-d6fcef8207de:f364ldUw3wIJFGn3JXE2NpGdAvUSMlmK72gsYg1z\"\r\n    --data-urlencode \"grant_type=authorization_code\" \r\n    --data-urlencode \"redirect_uri=http://localhost:49420/oauth\"\r\n    --data-urlencode \"code=def50200e6f3c65cfaba9419cbf6e48a7ed4324ef851b0ace493213884496b851fd825b90b4f994ee265a62f2358bbcbb0f990af5dbfd93dc63e51a7a6fa3bcfc7f722f56366b0a726fd1ed5df1cb926b16610fc7beb0f236e8858e86397422e3caa75d8094af8ba8ad6a93b938bd341bec1e4df671ad71ad1d5fa41166f5d4b2a3ac7d9172c35a8501f10ad722ec2aea88439c21b148ec2ba85e93c17acebe7d7f3d0118a50941cab145ed5ce92946426e5d388584556c0b010c567b433c577a1c4f7b1dfb2c99c25a0efadece4f64f19e54305bfc591e2b30b1a7ba1a33af3e039bcfa80b21ca365dc003f07989fca92472c2c8e2daab51151624a6a10bc511f2ed586f06544f7b98566df4667f5bbd6ba7c6707cb673c767c9eab5a74e63a8269688941c3158e8cc1cb5ebe9a8aa468faf415171a481ee1489b58bedb5fc329b23e0e34e76a4a500270fbebe4e1d20a0f17cebc96cd8ab3db383af746ca0699da34b4665afad30e9dde4f5f507a1dd14c73a692f06de8bafe3be81d7744dbcd8c5f7d3c767101ff5ce0556c244130c1c3fc3f53975a841c0cacebb70118f7552f50c2d2b1c421b8a21e\" \r\n```\r\n\r\nThe result will be a JSON answer with the users access_token and refresh_token as well as the expiry in seconds.\r\n\r\n```\r\n{\r\n    \"token_type\":\"Bearer\",\r\n    \"expires_in\":1800,\r\n    \"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.       eyJhdWQiOiI5NzE3MGU2NC1kMzkwLTQ2OTYtYmE0Ni1kNmZjZWY4MjA3ZGUiLCJqdGkiOiJlOWVhN2Q0MWI1NDIzNTcyYWU0MDEzYjEzMDZiMGRkNWM3YmQ2ZTNjMDNhYTZmNjQ2M2NlMjUzNTc0ZmUyMWE3NGQyNTIyMTJhODQwMmI1ZCIsImlhdCI6MTY2MTI1MzE0OCwibmJmIjoxNjYxMjUzMTQ4LCJleHAiOjE2NjEyNTQ5NDgsInN1YiI6IjQ2MjA5Iiwic2NvcGVzIjpbImZmbi5tZXJjaGFudC5yZWFkIiwiZmZuLm1lcmNoYW50LndyaXRlIl19.eEwY021wR3BWVp-wbAVQrjfqwFbYqLlOV_ca-cb7-O3Kdpi8mkFQBxfI8rzSiV_1WpAINf4ydV9FR9Ty992SMiAqGJ3T9zDHd68oUDePeq7Xfafp-87UboI2mCfGd7518CoKVLqg5ohb4YCqgC7Dz588FofggCQyDZQSM-8raOgcM-pJ1TT7oRuYuDHsOzCOTPcX2YiGYKCc3M6kxlBy_NjrJoLa4qysLRmPkznWwj0caC7a0VJO5KubvECcMb9D7Byr3UNjI7GiGMAufa770V5qCjrWs4gOsRV-Bn7oQydvsL21qqjBKHcssQrlLZWmrcfKqgBKwfRXIx3Mu5HBCmtHjHMnuvPVEZAj6fEfIwjYSeTAHTHApEwbE7J1MPd8MU0K6X2YEUF315fXN5F3rO3ZL5FdTwcM1E-1-PKubLuMAaE6Lw-QsDtBoI4ESylomCmCCfgLV4Vj-in_oCJUmKXAX0tDSa9y9vb6oAExung_BTJCBemffCtkJ55Px7bvi9JXmwvI0pIFo3QzTUtRbFDizCMrPZvsatFx64mXX3IDoVqXr3uzvdetBIJEj2ngVdGRrKGt4Yboae5oFV2d5jdSZBL28pwGjey__ZB4zLR1DodQ0sOqDWJ3WsEjMYXU8_-IGrS8Kkw8Q0R0UqqyVLfcLr-cfH5tYqf2QLqAScY\",\"refresh_token\":\"def50200e636703f8d6372401e7b5e1163e0f46e5d593f6f8a1e9b1b2777d64684b87b7c552db62f9670bc482a3958d8aafb78083c7166c13f2f233fe4623d22873c819a560dc3213a51448a1e0763c2a0f7fb7230ceeae22a7fa84717458886584ab5a0ed1a500be5f9d3ed36b1d063d39b56c8431f3fe623055626c1f99f8c5b684853965645fe5c5bee941857aef79ae4f9b994316bec9d365119fe0fe8d035218c44d00a47c0e92b4613c1f388b9c171f3d79e45a6d2a52dfbd8d25608d6b0350420155e48cc179764a2432220cc0d1e9bfa7798050d0b36fe658e967186ea75cc1d1277cad973d43a0839c50b6885a87b5b446452855a00ac75c5f6d7f62b914496e30ab89a16b335977e4363b94dda7364bb052832a5d122696b6476fb0e1631030ea3c42d9659ca839cc44919efc9532c84f7170e634d3e189eb181d0c114ed9d8150c619f7567587e0311d89d51d1325646d2c014757ba7f2d7b02f7b56a52e093ed2ea95a8abe4a0289b24a5636dce8ad01c20e8cce8c4c51263e7f1731bb6335b0e31342e2439c77ab7cce7a147e24c9be9d61d8eba216fbfd4d5be2fba3502e69000ad6e67b7230a7f924\"\r\n}\r\n```\r\n\r\n### Step 4 - Test the access_token\r\n\r\nUsing your newly aquired access_token you can test if its working (reminder: the access_token has a limited lifetime and might be expired, in which case we would need to refresh it (see Step 5)).\r\n\r\nTemplate: Test communication with access token on sandbox or production (our client is for both systems)\r\n\r\n```\r\ncurl --location --request GET \"https://ffn-sbx.api.jtl-software.com/api/v1/users/current\"\r\n--header \"Authorization: Bearer [access_token]\"\r\n```\r\n\r\nIf you cannot retrieve the user data using this endpoint make sure you have logged into our respective portal website (sandbox, production) at least once as this triggers user creation in the system.\r\n\r\n### Step 5 - Refresh access_token when it expires\r\n\r\nTemplate: Get a new access token + refresh token with the refresh token\r\n\r\n```\r\ncurl --location --request POST \"https://oauth2.api.jtl-software.com/token\" \r\n    --header \"Content-Type: application/x-www-form-urlencoded\" \r\n    -u \"[client_id]:[client_secret]\"\r\n    --data-urlencode \"grant_type=refresh_token\" \r\n    --data-urlencode \"refresh_token=[refresh_token]\"\r\n```\r\n\r\nFilled with our example values:\r\n\r\n```\r\ncurl --location --request POST \"https://oauth2.api.jtl-software.com/token\"\r\n    --header \"Content-Type: application/x-www-form-urlencoded\"\r\n    -u \"97170e64-d390-4696-ba46-d6fcef8207de:f364ldUw3wIJFGn3JXE2NpGdAvUSMlmK72gsYg1z\"\r\n    --data-urlencode \"grant_type=refresh_token\"\r\n    --data-urlencode \"refresh_token=def50200a01c0caff50b7db271f8268e3806ab2cce8e28e25f41e5fe9167a6521b47f6ed0dd3dd2d7856e1983ae645b032cf9285e91c1ee535decb0e0ca3e52670773f2737114955267d83db0204f80233214a623fcc36de04127e1cdcda006eaf60cacfb30c80081a8c9314e20117f64639ab5e333301a10173385c1bfc660709fde0b1a3517f8030dfdba8187e53c23c9d5fe9f33c48e11a4aa41bfd9ea1291507ea1bc8c64df32bdc91c61af907c41cf0bb305cae76e68448a85ad65b0a03a23ec35a7e9cc42aadd0792b9d7d187ae028e2759a7f4a0164f94d9baca29779a702f023216631e1e777069cc2bc65fd404f4fcc5818219063beb1717afe159b8110394af9a0d245de960c227b1183d6a745819ac08d92238938da798f702f83a3faf648f07a8a6d1e694c008517fd8be2fa154aab88a3eaacb3cbb1830c4bdee018e06c7f81e68c5844213f1d02372b23a22d99ac06a860748a3db891fd71768d74470c9a5a8571058dd901c888d13cd4481d63a800322614e63d3d8e6fb109ee7e1b1e046cd086ecbc2d4d362ca662e3ac867f21168833abd7a8247b06602197b7da555361efbf07b0afed69f7a558\"\r\n```\r\n\r\nThe result will be the same format as in step 3. Refresh_tokens are only valid for a single refresh and you will get a new refresh_token every single time that you must persist.\r\n\r\n### My token is not working!\r\n\r\n#### 404 NotFound\r\n\r\nYou need to log into the respective portal website (sandbox-https://fulfillment-sandbox.jtl-software.com, production-https://fulfillment.jtl-software.com) at least once to trigger user creation.\r\n\r\n#### 403 Forbidden\r\n\r\nYou might be missing scopes in your token and don't have sufficient rights.\r\n\r\n#### 401 Forbidden\r\n\r\nIncorrect Oauth method. For example, we do not support the Oauth method authorisation \"client_credentials grant\".\r\nThe authorisation method \"code grant\" with user must be used.",
    "contact": {
      "name": "JTL-Software-GmbH",
      "url": "https://jtl-software.com",
      "email": "info@jtl-software.de"
    },
    "version": "v1"
  },
  "paths": {
    "/api/v1/fulfiller/authorizations": {
      "get": {
        "tags": [
          "Authorizations"
        ],
        "summary": "Get All",
        "description": "Get warehouse authorizations of all your merchants",
        "operationId": "AuthorizationsGetAll",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'merchantId', 'warehouses/warehouseId', 'warehouses/shippingMethods/shippingMethodId'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedAuthorizationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/authorizations/updates": {
      "get": {
        "tags": [
          "Authorizations"
        ],
        "summary": "Get Updates",
        "description": "Query authorizations for changes within a given timeframe.",
        "operationId": "AuthorizationsGetUpdates",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentAuthorizationList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/authorizations/{merchantId}": {
      "get": {
        "tags": [
          "Authorizations"
        ],
        "summary": "Get",
        "description": "Get warehouse authorizations of a specific merchant",
        "operationId": "AuthorizationsGet",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorizations_AuthorizationNotFound": {
                    "description": "The authorization does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_AuthorizationNotFound",
                        "description": "The authorization does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Authorization for fulfiller 'FULF' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  },
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Shared_UserIsNotAFulfiller": {
                    "description": "The given user does not have the role of 'Fulfiller'",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UserIsNotAFulfiller",
                        "description": "The given user does not have the role of 'Fulfiller'"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' must be a fulfiller"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/authorizations/{merchantId}/warehouses": {
      "post": {
        "tags": [
          "Authorizations"
        ],
        "summary": "Post Warehouse Authorization",
        "description": "Assign a warehouse authorization to a merchant",
        "operationId": "AuthorizationsPostWarehouseAuthorization",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Includes the warehouse id that shall be assigned",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseAuthorizationRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ShippingMethods_ShippingMethodNotFound": {
                    "description": "The shipping method with this id does not exist",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_ShippingMethodNotFound",
                        "description": "The shipping method with this id does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  },
                  "Authorizations_AlreadyAuthorized": {
                    "description": "The authorization exists already",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_AlreadyAuthorized",
                        "description": "The authorization exists already"
                      },
                      "errorMessages": [
                        {
                          "message": "Fulfiller 'FULF' is already authorized"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  },
                  "Warehouses_WarehouseAlreadyAuthorized": {
                    "description": "The warehouse is already authorized",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseAlreadyAuthorized",
                        "description": "The warehouse is already authorized"
                      },
                      "errorMessages": [
                        {
                          "message": "warehouse 'FULF04XX-12345-0001' is already authorized to merchant 'MERC'"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Authorizations_AuthorizationNotFound": {
                    "description": "The authorization does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_AuthorizationNotFound",
                        "description": "The authorization does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Authorization for fulfiller 'FULF' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  },
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Shared_ModelValidation": {
                    "description": "General validation exception",
                    "value": {
                      "errorCode": {
                        "code": "Shared_ModelValidation",
                        "description": "General validation exception"
                      },
                      "errorMessages": [
                        {
                          "message": "Model validation failed"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Authorizations_NoStandardShippingMethodAuthorized": {
                    "description": "At least one shippingMethod of type 'Standard' must be given when authorizing a warehouse to a merchant",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_NoStandardShippingMethodAuthorized",
                        "description": "At least one shippingMethod of type 'Standard' must be given when authorizing a warehouse to a merchant"
                      },
                      "errorMessages": [
                        {
                          "message": "The warehouse 'FULF04XX-12345-0001' must have at least one shipping method of type 'Standard'."
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001",
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  },
                  "Shared_UserIsNotAMerchant": {
                    "description": "The given user does not have the role of 'Merchant'",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UserIsNotAMerchant",
                        "description": "The given user does not have the role of 'Merchant'"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' must be a merchant"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/authorizations/{merchantId}/warehouses/{warehouseId}": {
      "delete": {
        "tags": [
          "Authorizations"
        ],
        "summary": "Delete Warehouse Authorization",
        "description": "Delete a warehouse authorization from a merchant",
        "operationId": "AuthorizationsDeleteWarehouseAuthorization",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Warehouse identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Shared_ModelValidation": {
                    "description": "General validation exception",
                    "value": {
                      "errorCode": {
                        "code": "Shared_ModelValidation",
                        "description": "General validation exception"
                      },
                      "errorMessages": [
                        {
                          "message": "Model validation failed"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Stocks_QuantityNotZero": {
                    "description": "Qantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotZero",
                        "description": "Qantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Shared_UserIsNotAMerchant": {
                    "description": "The given user does not have the role of 'Merchant'",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UserIsNotAMerchant",
                        "description": "The given user does not have the role of 'Merchant'"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' must be a merchant"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/authorizations/{merchantId}/warehouses/{warehouseId}/shippingMethods": {
      "post": {
        "tags": [
          "Authorizations"
        ],
        "summary": "Post Shipping Method Authorization",
        "description": "Assign available shipping methods for a merchant / warehouse combination",
        "operationId": "AuthorizationsPostShippingMethodAuthorization",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Warehouse identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Includes shipping methods that shall be available",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingMethodAuthorizationRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Authorizations_AuthorizationNotFound": {
                    "description": "The authorization does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_AuthorizationNotFound",
                        "description": "The authorization does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Authorization for fulfiller 'FULF' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  },
                  "Authorizations_ShippingMethodAuthorizationExists": {
                    "description": "The shipping method is already authorized",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_ShippingMethodAuthorizationExists",
                        "description": "The shipping method is already authorized"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' already authorized"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "ShippingMethods_ShippingMethodNotFound": {
                    "description": "The shipping method with this id does not exist",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_ShippingMethodNotFound",
                        "description": "The shipping method with this id does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  },
                  "Shared_UserIsNotAMerchant": {
                    "description": "The given user does not have the role of 'Merchant'",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UserIsNotAMerchant",
                        "description": "The given user does not have the role of 'Merchant'"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' must be a merchant"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Authorization"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/authorizations/{merchantId}/warehouses/{warehouseId}/shippingMethods/{shippingMethodId}": {
      "delete": {
        "tags": [
          "Authorizations"
        ],
        "summary": "Delete Shipping Method Authorization",
        "description": "Delete available shipping methods for a merchant / warehouse combination",
        "operationId": "AuthorizationsDeleteShippingMethodAuthorization",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Warehouse identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingMethodId",
            "in": "path",
            "description": "Includes shipping methods that shall be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorizations_NoStandardShippingMethodAuthorized": {
                    "description": "At least one shippingMethod of type 'Standard' must be given when authorizing a warehouse to a merchant",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_NoStandardShippingMethodAuthorized",
                        "description": "At least one shippingMethod of type 'Standard' must be given when authorizing a warehouse to a merchant"
                      },
                      "errorMessages": [
                        {
                          "message": "The warehouse 'FULF04XX-12345-0001' must have at least one shipping method of type 'Standard'."
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001",
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Shared_UserIsNotAMerchant": {
                    "description": "The given user does not have the role of 'Merchant'",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UserIsNotAMerchant",
                        "description": "The given user does not have the role of 'Merchant'"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' must be a merchant"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "ShippingMethods_ShippingMethodNotFound": {
                    "description": "The shipping method with this id does not exist",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_ShippingMethodNotFound",
                        "description": "The shipping method with this id does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  },
                  "Authorizations_AuthorizationNotFound": {
                    "description": "The authorization does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_AuthorizationNotFound",
                        "description": "The authorization does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Authorization for fulfiller 'FULF' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/inbounds": {
      "get": {
        "tags": [
          "Inbounds"
        ],
        "summary": "Get All",
        "description": "Get inbounds of all your merchants",
        "operationId": "InboundsGetAll",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'inboundId', 'merchantId', 'status', 'merchantInboundNumber', 'warehouseId', 'purchaseOrderNumber', 'externalInboundNumber', 'attributes/key', 'attributes/value', 'items/inboundItemId', 'items/jfsku', 'items/quantity', 'items/supplierSku'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedInboundResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/inbounds/updates": {
      "get": {
        "tags": [
          "Inbounds"
        ],
        "summary": "Get Updates",
        "description": "Query inbounds for changes within a given timeframe.",
        "operationId": "InboundsGetUpdates",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentInboundList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/inbounds/{inboundId}": {
      "get": {
        "tags": [
          "Inbounds"
        ],
        "summary": "Get",
        "description": "Get a specific inbound by inboundId",
        "operationId": "InboundsGet",
        "parameters": [
          {
            "name": "inboundId",
            "in": "path",
            "description": "Inbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Inbounds_InboundNotFound": {
                    "description": "The inbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Inbounds_InboundNotFound",
                        "description": "The inbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound 'string' not found"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantInboundNumber": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inbound"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/inbounds/{inboundId}/close": {
      "put": {
        "tags": [
          "Inbounds"
        ],
        "summary": "Close",
        "description": "Close an inbound if you do not expect any further items for it. Closing an inbound reduces the announced quantities of products in that inbound",
        "operationId": "InboundsClose",
        "parameters": [
          {
            "name": "inboundId",
            "in": "path",
            "description": "Inbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Inbounds_InboundNotFound": {
                    "description": "The inbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Inbounds_InboundNotFound",
                        "description": "The inbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound 'string' not found"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantInboundNumber": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Inbounds_FulfillerCanNotCloseInbound": {
                    "description": "The inbound cannot be closed by the fulfiller",
                    "value": {
                      "errorCode": {
                        "code": "Inbounds_FulfillerCanNotCloseInbound",
                        "description": "The inbound cannot be closed by the fulfiller"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound 'MERC03INBND01' is in state 'Preparation' an could not be closed"
                        }
                      ],
                      "errorMetadata": {
                        "InboundId": "MERC03INBND01",
                        "Status": "Preparation"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Products_ProductsNotFound": {
                    "description": "One or more of the given products do not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductsNotFound",
                        "description": "One or more of the given products do not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Products 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfskus": "MERC01PRDCT"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/inbounds/{inboundId}/incoming-goods": {
      "post": {
        "tags": [
          "Inbounds"
        ],
        "summary": "Post Incoming Goods",
        "description": "Declare an item as arrived at your warehouse. The stock of the specified product will be adjusted automatically.",
        "operationId": "InboundsPostIncomingGoods",
        "parameters": [
          {
            "name": "inboundId",
            "in": "path",
            "description": "Inbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Specify the item that has arrived at your warehouse",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncomingGoodsItemRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Inbounds_InboundNotFound": {
                    "description": "The inbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Inbounds_InboundNotFound",
                        "description": "The inbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound 'string' not found"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantInboundNumber": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Products_ProductsNotFound": {
                    "description": "One or more of the given products do not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductsNotFound",
                        "description": "One or more of the given products do not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Products 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfskus": "MERC01PRDCT"
                      }
                    }
                  },
                  "Shared_UpdateOperation": {
                    "description": "General failure in update procedure",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UpdateOperation",
                        "description": "General failure in update procedure"
                      },
                      "errorMessages": [
                        {
                          "message": "Unknown error in update operation occured"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Stocks_BatchNotSet": {
                    "description": "A batch must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchNotSet",
                        "description": "A batch must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is a batch product but batch is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeNotSet": {
                    "description": "A bestBefore date must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeNotSet",
                        "description": "A bestBefore date must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' has a best before date but date is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_ProductIsNotDivisible": {
                    "description": "The products quantity is not divisible and must be provided in full integers",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_ProductIsNotDivisible",
                        "description": "The products quantity is not divisible and must be provided in full integers"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not divisible: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', Quantity: 203.202, Quantity reserved: 203.202, Quantity blocked: 203.202, Quantity announced: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "Quantity": "203.202",
                        "QuantityReserved": "203.202",
                        "QuantityBlocked": "203.202",
                        "QuantityAnnounced": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_IsBillOfMaterial": {
                    "description": "Operation not allowed for Bills of Material",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_IsBillOfMaterial",
                        "description": "Operation not allowed for Bills of Material"
                      },
                      "errorMessages": [
                        {
                          "message": "Invalid operation for bill of material products: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughStock": {
                    "description": "Not enough stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughStock",
                        "description": "Not enough stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughBlockedStock": {
                    "description": "Not enough blocked stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughBlockedStock",
                        "description": "Not enough blocked stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough blocked stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughAnnouncedStock": {
                    "description": "Not enough announced stock",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughAnnouncedStock",
                        "description": "Not enough announced stock"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough announced stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BatchSetForNonBatchProduct": {
                    "description": "A batch cannot be set on a non batch stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchSetForNonBatchProduct",
                        "description": "A batch cannot be set on a non batch stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is not a batch product but batch is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeSetForNonBestBeforeProduct": {
                    "description": "A bestBefore date cannot be set on a non bestBefore stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeSetForNonBestBeforeProduct",
                        "description": "A bestBefore date cannot be set on a non bestBefore stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' does not have a best before date but date is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_WrongChangeType": {
                    "description": "Wrong change type provided",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_WrongChangeType",
                        "description": "Wrong change type provided"
                      },
                      "errorMessages": [
                        {
                          "message": "ChangeType is ReservationCanceled but was expected to be Adjustment"
                        }
                      ],
                      "errorMetadata": {
                        "ChangeType": "ReservationCanceled",
                        "ExpectedChangeType": "Adjustment",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReferenceItems": {
                    "description": "One or more reference item is invalid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReferenceItems",
                        "description": "One or more reference item is invalid"
                      },
                      "errorMessages": [
                        {
                          "message": "Reference item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedNotZero": {
                    "description": "The reserved quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedNotZero",
                        "description": "The reserved quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotZero": {
                    "description": "Announced quantity for this product needs to be 0 for this operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotZero",
                        "description": "Announced quantity for this product needs to be 0 for this operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotZero": {
                    "description": "Qantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotZero",
                        "description": "Qantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotNegativ": {
                    "description": "Quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotNegativ",
                        "description": "Quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityBlockedNotZero": {
                    "description": "The blocked quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityBlockedNotZero",
                        "description": "The blocked quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity blocked is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedIsZeroOrNegativ": {
                    "description": "The reserved quantity must be greater than 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedIsZeroOrNegativ",
                        "description": "The reserved quantity must be greater than 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is 0 or below for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedIsZero": {
                    "description": "The announced quantity cannot be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedIsZero",
                        "description": "The announced quantity cannot be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotNegativ": {
                    "description": "The announced quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotNegativ",
                        "description": "The announced quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAndBlockedIsZero": {
                    "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAndBlockedIsZero",
                        "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity and blocked quantity is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidOutboundItem": {
                    "description": "The outbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidOutboundItem",
                        "description": "The outbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidInboundItem": {
                    "description": "The inbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidInboundItem",
                        "description": "The inbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReturnItem": {
                    "description": "An item in the return is not valid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReturnItem",
                        "description": "An item in the return is not valid"
                      },
                      "errorMessages": [
                        {
                          "message": "Return item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NoStockReserved": {
                    "description": "No reserved stock exists for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NoStockReserved",
                        "description": "No reserved stock exists for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock reservation not found: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughReservedStock": {
                    "description": "Not enough reserved stock is available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughReservedStock",
                        "description": "Not enough reserved stock is available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough reserved stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', reserved quantity: 203.202, reserved quantity to cancel: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "QuantityReserved": "203.202",
                        "QuantityReservedToCancel": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_MerchantSkuMustNotBeEmpty": {
                    "description": "A merchantSku must be given",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_MerchantSkuMustNotBeEmpty",
                        "description": "A merchantSku must be given"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock operation does not provide a merchantSku: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_StockLevelBlockedIsNegative": {
                    "description": "Stocklevel blocked must not be negative",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_StockLevelBlockedIsNegative",
                        "description": "Stocklevel blocked must not be negative"
                      },
                      "errorMessages": [
                        {
                          "message": "Stocklevel blocked must not be negative for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inbound"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/inbounds/{inboundId}/incoming-goods/bulk": {
      "post": {
        "tags": [
          "Inbounds"
        ],
        "summary": "Post Incoming Goods Bulk",
        "description": "Declare multiple items as arrived at your warehouse.",
        "operationId": "InboundsPostIncomingGoodsBulk",
        "parameters": [
          {
            "name": "inboundId",
            "in": "path",
            "description": "Inbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Collection of incoming goods items",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncomingGoodsBulkRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Inbounds_InboundNotFound": {
                    "description": "The inbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Inbounds_InboundNotFound",
                        "description": "The inbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound 'string' not found"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantInboundNumber": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Products_ProductsNotFound": {
                    "description": "One or more of the given products do not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductsNotFound",
                        "description": "One or more of the given products do not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Products 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfskus": "MERC01PRDCT"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Shared_UpdateOperation": {
                    "description": "General failure in update procedure",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UpdateOperation",
                        "description": "General failure in update procedure"
                      },
                      "errorMessages": [
                        {
                          "message": "Unknown error in update operation occured"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Stocks_BatchNotSet": {
                    "description": "A batch must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchNotSet",
                        "description": "A batch must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is a batch product but batch is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeNotSet": {
                    "description": "A bestBefore date must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeNotSet",
                        "description": "A bestBefore date must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' has a best before date but date is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_ProductIsNotDivisible": {
                    "description": "The products quantity is not divisible and must be provided in full integers",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_ProductIsNotDivisible",
                        "description": "The products quantity is not divisible and must be provided in full integers"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not divisible: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', Quantity: 203.202, Quantity reserved: 203.202, Quantity blocked: 203.202, Quantity announced: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "Quantity": "203.202",
                        "QuantityReserved": "203.202",
                        "QuantityBlocked": "203.202",
                        "QuantityAnnounced": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_IsBillOfMaterial": {
                    "description": "Operation not allowed for Bills of Material",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_IsBillOfMaterial",
                        "description": "Operation not allowed for Bills of Material"
                      },
                      "errorMessages": [
                        {
                          "message": "Invalid operation for bill of material products: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughStock": {
                    "description": "Not enough stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughStock",
                        "description": "Not enough stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughBlockedStock": {
                    "description": "Not enough blocked stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughBlockedStock",
                        "description": "Not enough blocked stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough blocked stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughAnnouncedStock": {
                    "description": "Not enough announced stock",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughAnnouncedStock",
                        "description": "Not enough announced stock"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough announced stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BatchSetForNonBatchProduct": {
                    "description": "A batch cannot be set on a non batch stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchSetForNonBatchProduct",
                        "description": "A batch cannot be set on a non batch stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is not a batch product but batch is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeSetForNonBestBeforeProduct": {
                    "description": "A bestBefore date cannot be set on a non bestBefore stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeSetForNonBestBeforeProduct",
                        "description": "A bestBefore date cannot be set on a non bestBefore stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' does not have a best before date but date is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_WrongChangeType": {
                    "description": "Wrong change type provided",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_WrongChangeType",
                        "description": "Wrong change type provided"
                      },
                      "errorMessages": [
                        {
                          "message": "ChangeType is ReservationCanceled but was expected to be Adjustment"
                        }
                      ],
                      "errorMetadata": {
                        "ChangeType": "ReservationCanceled",
                        "ExpectedChangeType": "Adjustment",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReferenceItems": {
                    "description": "One or more reference item is invalid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReferenceItems",
                        "description": "One or more reference item is invalid"
                      },
                      "errorMessages": [
                        {
                          "message": "Reference item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedNotZero": {
                    "description": "The reserved quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedNotZero",
                        "description": "The reserved quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotZero": {
                    "description": "Announced quantity for this product needs to be 0 for this operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotZero",
                        "description": "Announced quantity for this product needs to be 0 for this operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotZero": {
                    "description": "Qantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotZero",
                        "description": "Qantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotNegativ": {
                    "description": "Quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotNegativ",
                        "description": "Quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityBlockedNotZero": {
                    "description": "The blocked quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityBlockedNotZero",
                        "description": "The blocked quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity blocked is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedIsZeroOrNegativ": {
                    "description": "The reserved quantity must be greater than 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedIsZeroOrNegativ",
                        "description": "The reserved quantity must be greater than 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is 0 or below for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedIsZero": {
                    "description": "The announced quantity cannot be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedIsZero",
                        "description": "The announced quantity cannot be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotNegativ": {
                    "description": "The announced quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotNegativ",
                        "description": "The announced quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAndBlockedIsZero": {
                    "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAndBlockedIsZero",
                        "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity and blocked quantity is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidOutboundItem": {
                    "description": "The outbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidOutboundItem",
                        "description": "The outbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidInboundItem": {
                    "description": "The inbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidInboundItem",
                        "description": "The inbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReturnItem": {
                    "description": "An item in the return is not valid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReturnItem",
                        "description": "An item in the return is not valid"
                      },
                      "errorMessages": [
                        {
                          "message": "Return item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NoStockReserved": {
                    "description": "No reserved stock exists for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NoStockReserved",
                        "description": "No reserved stock exists for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock reservation not found: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughReservedStock": {
                    "description": "Not enough reserved stock is available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughReservedStock",
                        "description": "Not enough reserved stock is available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough reserved stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', reserved quantity: 203.202, reserved quantity to cancel: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "QuantityReserved": "203.202",
                        "QuantityReservedToCancel": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_MerchantSkuMustNotBeEmpty": {
                    "description": "A merchantSku must be given",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_MerchantSkuMustNotBeEmpty",
                        "description": "A merchantSku must be given"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock operation does not provide a merchantSku: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_StockLevelBlockedIsNegative": {
                    "description": "Stocklevel blocked must not be negative",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_StockLevelBlockedIsNegative",
                        "description": "Stocklevel blocked must not be negative"
                      },
                      "errorMessages": [
                        {
                          "message": "Stocklevel blocked must not be negative for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Inbound"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/inbounds/{inboundId}/shipping-notifications": {
      "get": {
        "tags": [
          "Inbounds"
        ],
        "summary": "Get Shipping Notifications",
        "description": "Get information regarding the shipment of an inbound",
        "operationId": "InboundsGetShippingNotifications",
        "parameters": [
          {
            "name": "inboundId",
            "in": "path",
            "description": "Inbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Inbounds_InboundNotFound": {
                    "description": "The inbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Inbounds_InboundNotFound",
                        "description": "The inbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound 'string' not found"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantInboundNumber": "string"
                      }
                    }
                  },
                  "Shared_FulfillerMismatch": {
                    "description": "This object does not belong to this fulfiller",
                    "value": {
                      "errorCode": {
                        "code": "Shared_FulfillerMismatch",
                        "description": "This object does not belong to this fulfiller"
                      },
                      "errorMessages": [
                        {
                          "message": "This object does not belong to this fulfiller"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InboundShippingNotification"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/inbounds/{inboundId}/shipping-notifications/{shippingNotificationId}": {
      "get": {
        "tags": [
          "Inbounds"
        ],
        "summary": "Get Shipping Notification",
        "description": "Get a specific inbound shipping notification",
        "operationId": "InboundsGetShippingNotification",
        "parameters": [
          {
            "name": "inboundId",
            "in": "path",
            "description": "Your unique merchant inbound number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingNotificationId",
            "in": "path",
            "description": "Inbound shipping notification identifier or merchant shipping notification number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Inbounds_InboundNotFound": {
                    "description": "The inbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Inbounds_InboundNotFound",
                        "description": "The inbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound 'string' not found"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantInboundNumber": "string"
                      }
                    }
                  },
                  "Inbounds_InboundShippingNotificationNotFound": {
                    "description": "The inbound shipping notification does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Inbounds_InboundShippingNotificationNotFound",
                        "description": "The inbound shipping notification does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound shipping notification 'MSNN001' for inbound 'string' not found"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantShippingNotificationNumber": "MSNN001",
                        "MerchantInboundNumber": "string"
                      }
                    }
                  },
                  "Shared_FulfillerMismatch": {
                    "description": "This object does not belong to this fulfiller",
                    "value": {
                      "errorCode": {
                        "code": "Shared_FulfillerMismatch",
                        "description": "This object does not belong to this fulfiller"
                      },
                      "errorMessages": [
                        {
                          "message": "This object does not belong to this fulfiller"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundShippingNotification"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/inbounds/shipping-notifications/updates": {
      "get": {
        "tags": [
          "Inbounds"
        ],
        "summary": "Get Inbound Shipping Notification Updates",
        "description": "Query inbound shipping notifications for changes within a given timeframe.",
        "operationId": "InboundsGetInboundShippingNotificationUpdates",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentInboundShippingNotificationList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/merchants": {
      "get": {
        "tags": [
          "Merchants"
        ],
        "summary": "Get All",
        "description": "Get all authorized merchants",
        "operationId": "MerchantsGetAll",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'userId', 'address/lastname', 'address/company', 'address/city', 'address/email'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedMerchantResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/merchants/updates": {
      "get": {
        "tags": [
          "Merchants"
        ],
        "summary": "Get Updates",
        "description": "Query ffn server api fulfiller merchants models merchants for changes within a given timeframe.",
        "operationId": "MerchantsGetUpdates",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentMerchantList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/merchants/{merchantId}": {
      "get": {
        "tags": [
          "Merchants"
        ],
        "summary": "Get",
        "description": "Get a specific authorized merchant",
        "operationId": "MerchantsGet",
        "parameters": [
          {
            "name": "merchantId",
            "in": "path",
            "description": "Merchant identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Authorizations_AuthorizationNotFound": {
                    "description": "The authorization does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_AuthorizationNotFound",
                        "description": "The authorization does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Authorization for fulfiller 'FULF' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds": {
      "get": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Get All",
        "description": "Get all outbounds",
        "operationId": "OutboundsGetAll",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'outboundId', 'merchantId', 'merchantOutboundNumber', 'warehouseId', 'externalNumber', 'premiumType', 'status', 'shippingAddress/lastname', 'shippingAddress/company', 'shippingAddress/city', 'shippingAddress/email', 'items/jfsku', 'items/outboundItemId', 'items/name', 'items/merchantSku', 'items/quantity', 'senderAddress/lastname', 'senderAddress/company', 'senderAddress/city', 'senderAddress/email', 'attributes/key', 'attributes/value', 'statusTimestamp/pending', 'statusTimestamp/preparation', 'statusTimestamp/acknowledged', 'statusTimestamp/locked', 'statusTimestamp/pickprocess', 'statusTimestamp/shipped', 'statusTimestamp/partiallyShipped', 'statusTimestamp/canceled', 'statusTimestamp/partiallyCanceled'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedOutboundResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/updates": {
      "get": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Get Updates",
        "description": "Query outbounds for changes within a given timeframe.",
        "operationId": "OutboundsGetUpdates",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentOutboundList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/{outboundId}": {
      "get": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Get",
        "description": "Get a specific Outbound",
        "operationId": "OutboundsGet",
        "parameters": [
          {
            "name": "outboundId",
            "in": "path",
            "description": "Outbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Outbound"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/{outboundId}/attachments/{merchantDocumentId}": {
      "get": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Get Outbound Attachment",
        "description": "Get a specific attachment from an outbound",
        "operationId": "OutboundsGetOutboundAttachment",
        "parameters": [
          {
            "name": "outboundId",
            "in": "path",
            "description": "Outbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchantDocumentId",
            "in": "path",
            "description": "Merchant document identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Outbounds_OutboundAttachmentNotFound": {
                    "description": "The outbound attachment does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundAttachmentNotFound",
                        "description": "The outbound attachment does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Attachment 'Rechnung RE19700101' for outbound 'MERC02AXEV' not found"
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "MerchantDocumentId": "Rechnung RE19700101"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorizations_AuthorizationNotFound": {
                    "description": "The authorization does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_AuthorizationNotFound",
                        "description": "The authorization does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Authorization for fulfiller 'FULF' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "410": {
            "description": "Gone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_AttachmentIsNoLongerAvailable": {
                    "description": "The requested document for the given outbound {outboundId} has been automatically deleted, as documents from completed orders are retained for a maximum of {outboundAttachmentsExpireAfterMonth} months.",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_AttachmentIsNoLongerAvailable",
                        "description": "The requested document for the given outbound {outboundId} has been automatically deleted, as documents from completed orders are retained for a maximum of {outboundAttachmentsExpireAfterMonth} months."
                      },
                      "errorMessages": [
                        {
                          "message": "The requested document for the given outbound MERC02AXEV has been automatically deleted, as documents from completed orders are retained for a maximum of 24 months."
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "MerchantDocumentId": "Rechnung RE19700101",
                        "OutboundAttachmentsExpireAfterMonth": "24"
                      }
                    }
                  },
                  "Outbounds_OutboundAttachmentDeleted": {
                    "description": "The outbound attachment has been deleted",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundAttachmentDeleted",
                        "description": "The outbound attachment has been deleted"
                      },
                      "errorMessages": [
                        {
                          "message": "Attachment 'Rechnung RE19700101' for outbound 'MERC02AXEV' not found Attachment 'Rechnung RE19700101' for outbound 'MERC02AXEV' has exceeded its retention time and has been deleted"
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "MerchantDocumentId": "Rechnung RE19700101"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutboundAttachmentData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/{outboundId}/shipping-labels": {
      "post": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Post Shipping Label For Outbound",
        "description": "Request a new shipping label for an outbound",
        "operationId": "OutboundsPostShippingLabelForOutbound",
        "parameters": [
          {
            "name": "outboundId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShippingLabelDataRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Credentials_CredentialNotFound": {
                    "description": "The credential does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Credentials_CredentialNotFound",
                        "description": "The credential does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Credential '34374583abd4532' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "CredentialId": "34374583abd4532"
                      }
                    }
                  },
                  "Outbounds_ShippingLabelProvider": {
                    "description": "Generic error during shipping label generation",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_ShippingLabelProvider",
                        "description": "Generic error during shipping label generation"
                      },
                      "errorMessages": [
                        {
                          "message": "An error occured during shipping label generation"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Outbounds_OutboundShippingMethodAndShippingTypeSet": {
                    "description": "Either shippingType or shippingMethodId should be given, not both",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundShippingMethodAndShippingTypeSet",
                        "description": "Either shippingType or shippingMethodId should be given, not both"
                      },
                      "errorMessages": [
                        {
                          "message": "Only provide shippingType or shippingMethodId, not both"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Outbounds_AmazonSfpShippingServiceNotAvailable": {
                    "description": "Amazon SFP is not available",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_AmazonSfpShippingServiceNotAvailable",
                        "description": "Amazon SFP is not available"
                      },
                      "errorMessages": [
                        {
                          "message": "The shipping service 'string' is not available. Please change the shipping service."
                        }
                      ],
                      "errorMetadata": {
                        "InvalidCarrierCode": "string",
                        "InvalidCarrierName": "string",
                        "PossibleShippingServiceCarrierCodes": "string1,string2"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "ShippingMethods_ShippingMethodNotFound": {
                    "description": "The shipping method with this id does not exist",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_ShippingMethodNotFound",
                        "description": "The shipping method with this id does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutboundShippingLabel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/{outboundId}/shipping-labels/{shippingLabelId}": {
      "get": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Get Shipping Label For Outbound",
        "description": "Get a specific shipping label from an outbound",
        "operationId": "OutboundsGetShippingLabelForOutbound",
        "parameters": [
          {
            "name": "outboundId",
            "in": "path",
            "description": "Outbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingLabelId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Credentials_CredentialNotFound": {
                    "description": "The credential does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Credentials_CredentialNotFound",
                        "description": "The credential does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Credential '34374583abd4532' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "CredentialId": "34374583abd4532"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Outbounds_OutboundShippingLabelNotFound": {
                    "description": "There is no shipping label for this outbound",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundShippingLabelNotFound",
                        "description": "There is no shipping label for this outbound"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping label 'string' not found for outbound 'MERC02AXEV'"
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "ShippingLableId": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutboundShippingLabel"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/{outboundId}/shipping-notifications": {
      "post": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Post Shipping Notification",
        "description": "Declare an outbound as shipped. Stock changed will be applied automatically",
        "operationId": "OutboundsPostShippingNotification",
        "parameters": [
          {
            "name": "outboundId",
            "in": "path",
            "description": "Outbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define items and packages that have been shipped",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOutboundShippingNotificationRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ShippingMethods_ShippingMethodNotFound": {
                    "description": "The shipping method with this id does not exist",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_ShippingMethodNotFound",
                        "description": "The shipping method with this id does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  },
                  "Outbounds_ShippingLabelProvider": {
                    "description": "Generic error during shipping label generation",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_ShippingLabelProvider",
                        "description": "Generic error during shipping label generation"
                      },
                      "errorMessages": [
                        {
                          "message": "An error occured during shipping label generation"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Shared_UpdateOperation": {
                    "description": "General failure in update procedure",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UpdateOperation",
                        "description": "General failure in update procedure"
                      },
                      "errorMessages": [
                        {
                          "message": "Unknown error in update operation occured"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Outbounds_OutboundShippingNotificationNotEnoughQuantityOpen": {
                    "description": "There was not enough shippable quanity on an item of this outbound",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundShippingNotificationNotEnoughQuantityOpen",
                        "description": "There was not enough shippable quanity on an item of this outbound"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' does not have enough shippable quantity on outbound 'MERC02AXEV' - quantity: 203.202, quantity open: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "Jfsku": "MERC01PRDCT",
                        "QuantityShippingNotification": "203.202",
                        "QuantityOpen": "203.202"
                      }
                    }
                  },
                  "Stocks_BatchNotSet": {
                    "description": "A batch must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchNotSet",
                        "description": "A batch must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is a batch product but batch is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeNotSet": {
                    "description": "A bestBefore date must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeNotSet",
                        "description": "A bestBefore date must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' has a best before date but date is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_ProductIsNotDivisible": {
                    "description": "The products quantity is not divisible and must be provided in full integers",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_ProductIsNotDivisible",
                        "description": "The products quantity is not divisible and must be provided in full integers"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not divisible: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', Quantity: 203.202, Quantity reserved: 203.202, Quantity blocked: 203.202, Quantity announced: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "Quantity": "203.202",
                        "QuantityReserved": "203.202",
                        "QuantityBlocked": "203.202",
                        "QuantityAnnounced": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_IsBillOfMaterial": {
                    "description": "Operation not allowed for Bills of Material",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_IsBillOfMaterial",
                        "description": "Operation not allowed for Bills of Material"
                      },
                      "errorMessages": [
                        {
                          "message": "Invalid operation for bill of material products: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughStock": {
                    "description": "Not enough stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughStock",
                        "description": "Not enough stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughBlockedStock": {
                    "description": "Not enough blocked stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughBlockedStock",
                        "description": "Not enough blocked stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough blocked stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughAnnouncedStock": {
                    "description": "Not enough announced stock",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughAnnouncedStock",
                        "description": "Not enough announced stock"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough announced stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BatchSetForNonBatchProduct": {
                    "description": "A batch cannot be set on a non batch stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchSetForNonBatchProduct",
                        "description": "A batch cannot be set on a non batch stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is not a batch product but batch is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeSetForNonBestBeforeProduct": {
                    "description": "A bestBefore date cannot be set on a non bestBefore stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeSetForNonBestBeforeProduct",
                        "description": "A bestBefore date cannot be set on a non bestBefore stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' does not have a best before date but date is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_WrongChangeType": {
                    "description": "Wrong change type provided",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_WrongChangeType",
                        "description": "Wrong change type provided"
                      },
                      "errorMessages": [
                        {
                          "message": "ChangeType is ReservationCanceled but was expected to be Adjustment"
                        }
                      ],
                      "errorMetadata": {
                        "ChangeType": "ReservationCanceled",
                        "ExpectedChangeType": "Adjustment",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReferenceItems": {
                    "description": "One or more reference item is invalid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReferenceItems",
                        "description": "One or more reference item is invalid"
                      },
                      "errorMessages": [
                        {
                          "message": "Reference item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedNotZero": {
                    "description": "The reserved quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedNotZero",
                        "description": "The reserved quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotZero": {
                    "description": "Announced quantity for this product needs to be 0 for this operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotZero",
                        "description": "Announced quantity for this product needs to be 0 for this operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotZero": {
                    "description": "Qantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotZero",
                        "description": "Qantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotNegativ": {
                    "description": "Quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotNegativ",
                        "description": "Quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityBlockedNotZero": {
                    "description": "The blocked quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityBlockedNotZero",
                        "description": "The blocked quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity blocked is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedIsZeroOrNegativ": {
                    "description": "The reserved quantity must be greater than 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedIsZeroOrNegativ",
                        "description": "The reserved quantity must be greater than 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is 0 or below for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedIsZero": {
                    "description": "The announced quantity cannot be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedIsZero",
                        "description": "The announced quantity cannot be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotNegativ": {
                    "description": "The announced quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotNegativ",
                        "description": "The announced quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAndBlockedIsZero": {
                    "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAndBlockedIsZero",
                        "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity and blocked quantity is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidOutboundItem": {
                    "description": "The outbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidOutboundItem",
                        "description": "The outbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidInboundItem": {
                    "description": "The inbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidInboundItem",
                        "description": "The inbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReturnItem": {
                    "description": "An item in the return is not valid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReturnItem",
                        "description": "An item in the return is not valid"
                      },
                      "errorMessages": [
                        {
                          "message": "Return item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NoStockReserved": {
                    "description": "No reserved stock exists for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NoStockReserved",
                        "description": "No reserved stock exists for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock reservation not found: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughReservedStock": {
                    "description": "Not enough reserved stock is available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughReservedStock",
                        "description": "Not enough reserved stock is available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough reserved stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', reserved quantity: 203.202, reserved quantity to cancel: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "QuantityReserved": "203.202",
                        "QuantityReservedToCancel": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_MerchantSkuMustNotBeEmpty": {
                    "description": "A merchantSku must be given",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_MerchantSkuMustNotBeEmpty",
                        "description": "A merchantSku must be given"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock operation does not provide a merchantSku: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_StockLevelBlockedIsNegative": {
                    "description": "Stocklevel blocked must not be negative",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_StockLevelBlockedIsNegative",
                        "description": "Stocklevel blocked must not be negative"
                      },
                      "errorMessages": [
                        {
                          "message": "Stocklevel blocked must not be negative for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_OutboundShippingNotificationStatusForbidden": {
                    "description": "The outbound shipping notification cannot be set to the status",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundShippingNotificationStatusForbidden",
                        "description": "The outbound shipping notification cannot be set to the status"
                      },
                      "errorMessages": [
                        {
                          "message": "Cannot create shipping notification when outbound 'MERC02AXEV' has status 'Preparation'"
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "Status": "Preparation"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutboundShippingNotification"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Get Shipping Notifications",
        "description": "Get all outbound shipping notifications from an outbound",
        "operationId": "OutboundsGetShippingNotifications",
        "parameters": [
          {
            "name": "outboundId",
            "in": "path",
            "description": "Outbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OutboundShippingNotification"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/{outboundId}/shipping-notifications/{shippingNotificationId}": {
      "get": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Get Shipping Notification",
        "description": "Get a specific outbound shipping notification",
        "operationId": "OutboundsGetShippingNotification",
        "parameters": [
          {
            "name": "outboundId",
            "in": "path",
            "description": "Outbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingNotificationId",
            "in": "path",
            "description": "Outbound shipping notification identifier or fulfiller shipping notification number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Outbounds_OutboundShippingNotificationNotFound": {
                    "description": "The outbound shipping notification could not be found",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundShippingNotificationNotFound",
                        "description": "The outbound shipping notification could not be found"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping notification 'SH-123-002' not found for outbound 'MERC02AXEV'"
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "FulfillerShippingNotificationNumber": "SH-123-002"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OutboundShippingNotification"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/{outboundId}/status": {
      "put": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Change Status",
        "description": "Change the status of an outbound. For example if an outbound started to be picked",
        "operationId": "OutboundsChangeStatus",
        "parameters": [
          {
            "name": "outboundId",
            "in": "path",
            "description": "Outbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectVersion",
            "in": "query",
            "description": "Last known modification date of this outbound.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "The new status that has to be applied to the outbound",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeStatusRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorizations_AuthorizationNotFound": {
                    "description": "The authorization does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_AuthorizationNotFound",
                        "description": "The authorization does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Authorization for fulfiller 'FULF' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Outbounds_InapropriateShippingMethod": {
                    "description": "The use of this shippingmethod is not possible in this scenario",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_InapropriateShippingMethod",
                        "description": "The use of this shippingmethod is not possible in this scenario"
                      },
                      "errorMessages": [
                        {
                          "message": "The shippingmethod 'FULF0A0001' is not appropriate for this outbound ('string')"
                        }
                      ],
                      "errorMetadata": {
                        "Reason": "string",
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Products_ProductsNotFound": {
                    "description": "One or more of the given products do not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductsNotFound",
                        "description": "One or more of the given products do not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Products 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfskus": "MERC01PRDCT"
                      }
                    }
                  },
                  "ShippingMethods_ShippingMethodNotFound": {
                    "description": "The shipping method with this id does not exist",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_ShippingMethodNotFound",
                        "description": "The shipping method with this id does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  },
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Outbounds_OutboundStatusChangeForbidden": {
                    "description": "The outbound cannot be set to the status",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundStatusChangeForbidden",
                        "description": "The outbound cannot be set to the status"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound transition from status 'Preparation' to 'Preparation' is not allowed"
                        }
                      ],
                      "errorMetadata": {
                        "From": "Preparation",
                        "To": "Preparation"
                      }
                    }
                  },
                  "Outbounds_OutdatedOutbound": {
                    "description": "The given version of this outbound is outdated",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutdatedOutbound",
                        "description": "The given version of this outbound is outdated"
                      },
                      "errorMessages": [
                        {
                          "message": "The given version of this outbound is outdated."
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV"
                      }
                    }
                  },
                  "Shared_OutdatedObject": {
                    "description": "The given version of this object is outdated.",
                    "value": {
                      "errorCode": {
                        "code": "Shared_OutdatedObject",
                        "description": "The given version of this object is outdated."
                      },
                      "errorMessages": [
                        {
                          "message": "The given version of this object is outdated."
                        }
                      ],
                      "errorMetadata": {
                        "Pk": "string",
                        "CurrentObjectVersion": "2020-03-02T08:49:37.909+00:00",
                        "GivenObjectVersion": "2020-03-06T08:49:37.909+00:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/{outboundId}/warehouse": {
      "put": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Change Warehouse",
        "description": "Change the warehouse of an outbound that will be used for fulfilling that outbound",
        "operationId": "OutboundsChangeWarehouse",
        "parameters": [
          {
            "name": "outboundId",
            "in": "path",
            "description": "Outbound identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "oversale",
            "in": "query",
            "description": "Allow outbound with insufficient stock",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "The new warehouse that shall be used to fulfill the outbound",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeWarehouseRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Stocks_NotEnoughStock": {
                    "description": "Not enough stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughStock",
                        "description": "Not enough stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Products_ProductsNotFound": {
                    "description": "One or more of the given products do not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductsNotFound",
                        "description": "One or more of the given products do not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Products 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfskus": "MERC01PRDCT"
                      }
                    }
                  },
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorizations_AuthorizationNotFound": {
                    "description": "The authorization does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_AuthorizationNotFound",
                        "description": "The authorization does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Authorization for fulfiller 'FULF' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  },
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/outbounds/status": {
      "post": {
        "tags": [
          "Outbounds"
        ],
        "summary": "Change Status Bulk",
        "description": "Change the status of multiple outbounds. Returns the list of changed outbounds. If it is not possible to change the status of a single outbound, the corresponding errorcode will be filled, otherwise the errorcode is empty.",
        "operationId": "OutboundsChangeStatusBulk",
        "requestBody": {
          "description": "The new status that has to be applied to the outbound",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeOutboundStatusRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangedOutboundStatus"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get All",
        "description": "Get all products from all your merchants",
        "operationId": "ProductsGetAll",
        "parameters": [
          {
            "name": "referencedWarehouse",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'jfsku', 'merchantId', 'name', 'merchantSku', 'productGroup', 'manufacturer', 'condition', 'identifier/ean', 'identifier/isbn', 'identifier/upc', 'identifier/asin', 'identifier/mpn/manufacturer', 'identifier/mpn/partNumber', 'specifications/unNumber', 'specifications/hazardIdentifier', 'specifications/taric', 'specifications/fnsku', 'specifications/isBatch', 'specifications/isDivisible', 'specifications/isBestBefore', 'specifications/isSerialNumber', 'specifications/isBillOfMaterials', 'attributes/key', 'attributes/value', 'pictures/number', 'bundles/ean', 'bundles/upc', 'statistics/incomingGoods', 'statistics/outgoingGoods', 'statistics/outgoingGoodsLast30', 'statistics/outgoingGoodsLast365', 'statistics/outgoingGoods30To60', 'statistics/averageInventory', 'statistics/inventoryTurnover', 'statistics/rangesOfCoverage', 'stock/stockLevel', 'stock/stockLevelAnnounced', 'stock/stockLevelReserved', 'stock/stockLevelBlocked', 'stock/stockReservedDetails/outboundId', 'stock/stockAnnouncedDetails/inboundId', 'stock/warehouses/warehouseId', 'stock/warehouses/stockLevel', 'stock/warehouses/stockLevelAnnounced', 'stock/warehouses/stockLevelReserved', 'stock/warehouses/stockLevelBlocked', 'stock/warehouses/stockReservedDetails/outboundId', 'stock/warehouses/stockAnnouncedDetails/inboundId', 'relatedProducts/jfsku', 'relatedProducts/condition', 'identifier'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedProductResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/products/updates": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get Updates",
        "description": "Query products for changes within a given timeframe.",
        "operationId": "ProductsGetUpdates",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentProductList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/products/{jfsku}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get",
        "description": "Get a specific product",
        "operationId": "ProductsGet",
        "parameters": [
          {
            "name": "jfsku",
            "in": "path",
            "description": "Product identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/products/{jfsku}/pictures/{number}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get Picture",
        "description": "Get a picture from a product",
        "operationId": "ProductsGetPicture",
        "parameters": [
          {
            "name": "jfsku",
            "in": "path",
            "description": "Product identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Number of the picture. A Product can have several pictures",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Products_PictureNotFound": {
                    "description": "The picture does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_PictureNotFound",
                        "description": "The picture does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Picture 30220 not found for product 'MERC01PRDCT'"
                        }
                      ],
                      "errorMetadata": {
                        "Number": "30220",
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Shared_FileNotFound": {
                    "description": "The file was not found",
                    "value": {
                      "errorCode": {
                        "code": "Shared_FileNotFound",
                        "description": "The file was not found"
                      },
                      "errorMessages": [
                        {
                          "message": "File 'string' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "Filename": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PictureData"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/products/{jfsku}/pictures/{number}/data": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get Picture Data",
        "description": "Get a specific picture from a product",
        "operationId": "ProductsGetPictureData",
        "parameters": [
          {
            "name": "jfsku",
            "in": "path",
            "description": "Product identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "The number of the picture you want to receive",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Products_PictureNotFound": {
                    "description": "The picture does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_PictureNotFound",
                        "description": "The picture does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Picture 30220 not found for product 'MERC01PRDCT'"
                        }
                      ],
                      "errorMetadata": {
                        "Number": "30220",
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Shared_FileNotFound": {
                    "description": "The file was not found",
                    "value": {
                      "errorCode": {
                        "code": "Shared_FileNotFound",
                        "description": "The file was not found"
                      },
                      "errorMessages": [
                        {
                          "message": "File 'string' does not exist"
                        }
                      ],
                      "errorMetadata": {
                        "Filename": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/products/{jfsku}/related-products/condition": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Post Related",
        "description": "Create a new product with a condition with a relation to given jfsku",
        "operationId": "ProductsPostRelated",
        "parameters": [
          {
            "name": "jfsku",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Product details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRelatedProductRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Products_CanNotCreateBillOfMaterialWithCondition": {
                    "description": "A Bill of Materials cannot have a condition",
                    "value": {
                      "errorCode": {
                        "code": "Products_CanNotCreateBillOfMaterialWithCondition",
                        "description": "A Bill of Materials cannot have a condition"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is a bill of material product and cannot have a condition"
                        }
                      ],
                      "errorMetadata": {
                        "MerchantSku": "ART2394871",
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Products_ConditionOfRelatedProductCanNotBeUnknown": {
                    "description": "In a group of related products none of them can have the condition 'Unknown'",
                    "value": {
                      "errorCode": {
                        "code": "Products_ConditionOfRelatedProductCanNotBeUnknown",
                        "description": "In a group of related products none of them can have the condition 'Unknown'"
                      },
                      "errorMessages": [
                        {
                          "message": "Condition for product 'MERC01PRDCT' must not be 'Unknown'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Products_ConditionMustBeUniqueInRelatedProductsList": {
                    "description": "In a group of related products every condition can only occur at most once",
                    "value": {
                      "errorCode": {
                        "code": "Products_ConditionMustBeUniqueInRelatedProductsList",
                        "description": "In a group of related products every condition can only occur at most once"
                      },
                      "errorMessages": [
                        {
                          "message": "Condition 'Used' already used for product 'string'"
                        }
                      ],
                      "errorMetadata": {
                        "JfskuWithSameCondition": "string",
                        "Condition": "Used",
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns": {
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "Post",
        "description": "Create a new return",
        "operationId": "ReturnsPost",
        "requestBody": {
          "description": "Return details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReturnRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Returns_OutboundItemNotShipped": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_OutboundItemNotShipped",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "OutboundItemId": "5",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Returns_OutboundItemNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_OutboundItemNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "OutboundItemId": "5",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Outbounds_OutboundNotFound": {
                    "description": "The outbound does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Outbounds_OutboundNotFound",
                        "description": "The outbound does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound not found"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Returns_JfskuDoesNotMatchOutboundItem": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_JfskuDoesNotMatchOutboundItem",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "OutboundItemId": "5",
                        "Jfsku": "MERC01PRDCT",
                        "ExpectedJfsku": "string",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Returns_OutboundForReturnItemNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_OutboundForReturnItemNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Returns_DuplicateReturn": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_DuplicateReturn",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Returns_DuplicateReturnItem": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_DuplicateReturnItem",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get All",
        "description": "Get all your returns",
        "operationId": "ReturnsGetAll",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'returnId', 'state', 'warehouseId', 'merchantId', 'merchantReturnNumber', 'fulfillerReturnNumber', 'customerAddress/lastname', 'customerAddress/company', 'customerAddress/city', 'customerAddress/email', 'items/returnItemId', 'items/jfsku', 'items/merchantSku', 'items/name', 'items/outboundId', 'items/condition'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedReturnResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns/updates": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get Updates",
        "description": "Query returns for changes within a given timeframe.",
        "operationId": "ReturnsGetUpdates",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentReturnList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns/{returnId}": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get",
        "description": "Get a specific return",
        "operationId": "ReturnsGet",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Return"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Returns"
        ],
        "summary": "Patch",
        "description": "Update a return",
        "operationId": "ReturnsPatch",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectVersion",
            "in": "query",
            "description": "Last known modification date of this return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "Return details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReturnRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Shared_DuplicateKey": {
                    "description": "The given key already exists",
                    "value": {
                      "errorCode": {
                        "code": "Shared_DuplicateKey",
                        "description": "The given key already exists"
                      },
                      "errorMessages": [
                        {
                          "message": "The given key already exists"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Shared_OutdatedObject": {
                    "description": "The given version of this object is outdated.",
                    "value": {
                      "errorCode": {
                        "code": "Shared_OutdatedObject",
                        "description": "The given version of this object is outdated."
                      },
                      "errorMessages": [
                        {
                          "message": "The given version of this object is outdated."
                        }
                      ],
                      "errorMetadata": {
                        "Pk": "string",
                        "CurrentObjectVersion": "2020-03-02T08:49:37.909+00:00",
                        "GivenObjectVersion": "2020-03-06T08:49:37.909+00:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnIsLocked": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnIsLocked",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": "This return is locked by User FULF until 2020-03-06T08:49:37.909+00:00"
                        }
                      ],
                      "errorMetadata": {
                        "LockedByUserId": "FULF",
                        "LockedUntil": "2020-03-06T08:49:37.909+00:00",
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Returns"
        ],
        "summary": "Delete",
        "description": "Delete a return",
        "operationId": "ReturnsDelete",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_NotAllowedState": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_NotAllowedState",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "currentState": "Announced",
                        "allowedStates": "Arrived,Completed",
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns/{returnId}/changes": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get Changes for specific for specific Return",
        "description": "Query changes for specific Return within a given timeframe.",
        "operationId": "ReturnsGetChangesFromReturn",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentReturnChangeList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns/{returnId}/items": {
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "Post Return Item",
        "description": "Create a new return item",
        "operationId": "ReturnsPostReturnItem",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectVersion",
            "in": "query",
            "description": "Last known modification date of this return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReturnItemRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_OutboundItemNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_OutboundItemNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "OutboundItemId": "5",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Returns_OutboundItemNotShipped": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_OutboundItemNotShipped",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "OutboundItemId": "5",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Returns_JfskuDoesNotMatchOutboundItem": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_JfskuDoesNotMatchOutboundItem",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "OutboundItemId": "5",
                        "Jfsku": "MERC01PRDCT",
                        "ExpectedJfsku": "string",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Returns_OutboundForReturnItemNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_OutboundForReturnItemNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "OutboundId": "MERC02AXEV",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Returns_DuplicateReturnItem": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_DuplicateReturnItem",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Shared_OutdatedObject": {
                    "description": "The given version of this object is outdated.",
                    "value": {
                      "errorCode": {
                        "code": "Shared_OutdatedObject",
                        "description": "The given version of this object is outdated."
                      },
                      "errorMessages": [
                        {
                          "message": "The given version of this object is outdated."
                        }
                      ],
                      "errorMetadata": {
                        "Pk": "string",
                        "CurrentObjectVersion": "2020-03-02T08:49:37.909+00:00",
                        "GivenObjectVersion": "2020-03-06T08:49:37.909+00:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnIsLocked": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnIsLocked",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": "This return is locked by User FULF until 2020-03-06T08:49:37.909+00:00"
                        }
                      ],
                      "errorMetadata": {
                        "LockedByUserId": "FULF",
                        "LockedUntil": "2020-03-06T08:49:37.909+00:00",
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns/{returnId}/items/{returnItemId}": {
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "Split Return Item",
        "description": "Split the return item into two items.",
        "operationId": "ReturnsSplitReturnItem",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectVersion",
            "in": "query",
            "description": "Last known modification date of this return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReturnItemSplitRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_NotEnoughQuantity": {
                    "description": "The quantity must be less than the quantity in the return item",
                    "value": {
                      "errorCode": {
                        "code": "Returns_NotEnoughQuantity",
                        "description": "The quantity must be less than the quantity in the return item"
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Shared_OutdatedObject": {
                    "description": "The given version of this object is outdated.",
                    "value": {
                      "errorCode": {
                        "code": "Shared_OutdatedObject",
                        "description": "The given version of this object is outdated."
                      },
                      "errorMessages": [
                        {
                          "message": "The given version of this object is outdated."
                        }
                      ],
                      "errorMetadata": {
                        "Pk": "string",
                        "CurrentObjectVersion": "2020-03-02T08:49:37.909+00:00",
                        "GivenObjectVersion": "2020-03-06T08:49:37.909+00:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  },
                  "Returns_ReturnItemNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnItemNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnIsLocked": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnIsLocked",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": "This return is locked by User FULF until 2020-03-06T08:49:37.909+00:00"
                        }
                      ],
                      "errorMetadata": {
                        "LockedByUserId": "FULF",
                        "LockedUntil": "2020-03-06T08:49:37.909+00:00",
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get Return Item",
        "description": "Get a specific return",
        "operationId": "ReturnsGetReturnItem",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  },
                  "Returns_ReturnItemNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnItemNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnItem"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Returns"
        ],
        "summary": "Patch Return Item",
        "description": "Update a return item",
        "operationId": "ReturnsPatchReturnItem",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnItemId",
            "in": "path",
            "description": "Return item identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectVersion",
            "in": "query",
            "description": "Last known modification date of this return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReturnItemRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  },
                  "Returns_ReturnItemNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnItemNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnIsLocked": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnIsLocked",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": "This return is locked by User FULF until 2020-03-06T08:49:37.909+00:00"
                        }
                      ],
                      "errorMetadata": {
                        "LockedByUserId": "FULF",
                        "LockedUntil": "2020-03-06T08:49:37.909+00:00",
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Shared_OutdatedObject": {
                    "description": "The given version of this object is outdated.",
                    "value": {
                      "errorCode": {
                        "code": "Shared_OutdatedObject",
                        "description": "The given version of this object is outdated."
                      },
                      "errorMessages": [
                        {
                          "message": "The given version of this object is outdated."
                        }
                      ],
                      "errorMetadata": {
                        "Pk": "string",
                        "CurrentObjectVersion": "2020-03-02T08:49:37.909+00:00",
                        "GivenObjectVersion": "2020-03-06T08:49:37.909+00:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Returns"
        ],
        "summary": "Delete Return Item",
        "description": "Delete a return",
        "operationId": "ReturnsDeleteReturnItem",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  },
                  "Returns_ReturnItemNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnItemNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Returns_ItemListIsEmpty": {
                    "description": "The item list must contain at least one entry.",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ItemListIsEmpty",
                        "description": "The item list must contain at least one entry."
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  },
                  "Returns_NotAllowedItemState": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_NotAllowedItemState",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "currentState": "Announced",
                        "allowedStates": "Arrived,Completed",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns/{returnId}/items/{returnItemId}/incomming-goods": {
      "post": {
        "tags": [
          "Returns"
        ],
        "summary": "Post Incoming Return Item",
        "description": "Declare an item as arrived at your warehouse. The stock of the product from this item will be adjusted automatically. The specified quantity or quantity blocked must correspond to the quantity from the return item. The state of the item must be 'arrived'",
        "operationId": "ReturnsPostIncomingReturnItem",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "returnItemId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectVersion",
            "in": "query",
            "description": "Last known modification date of this return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncomingReturnItemRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Returns_QuantityDoesNotCorresond": {
                    "description": "The specified quantity or quantity blocked must correspond to the quantity from the return item.",
                    "value": {
                      "errorCode": {
                        "code": "Returns_QuantityDoesNotCorresond",
                        "description": "The specified quantity or quantity blocked must correspond to the quantity from the return item."
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "Quantity": "15.05",
                        "QuantityBlocked": "15.05",
                        "ExpectedQuantity": "15.05",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Returns_NotAllowedItemState": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_NotAllowedItemState",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "currentState": "Announced",
                        "allowedStates": "Arrived,Completed",
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Products_ConditionOfRelatedProductCanNotBeUnknown": {
                    "description": "In a group of related products none of them can have the condition 'Unknown'",
                    "value": {
                      "errorCode": {
                        "code": "Products_ConditionOfRelatedProductCanNotBeUnknown",
                        "description": "In a group of related products none of them can have the condition 'Unknown'"
                      },
                      "errorMessages": [
                        {
                          "message": "Condition for product 'MERC01PRDCT' must not be 'Unknown'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Shared_OutdatedObject": {
                    "description": "The given version of this object is outdated.",
                    "value": {
                      "errorCode": {
                        "code": "Shared_OutdatedObject",
                        "description": "The given version of this object is outdated."
                      },
                      "errorMessages": [
                        {
                          "message": "The given version of this object is outdated."
                        }
                      ],
                      "errorMetadata": {
                        "Pk": "string",
                        "CurrentObjectVersion": "2020-03-02T08:49:37.909+00:00",
                        "GivenObjectVersion": "2020-03-06T08:49:37.909+00:00"
                      }
                    }
                  },
                  "Stocks_BatchNotSet": {
                    "description": "A batch must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchNotSet",
                        "description": "A batch must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is a batch product but batch is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeNotSet": {
                    "description": "A bestBefore date must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeNotSet",
                        "description": "A bestBefore date must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' has a best before date but date is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_ProductIsNotDivisible": {
                    "description": "The products quantity is not divisible and must be provided in full integers",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_ProductIsNotDivisible",
                        "description": "The products quantity is not divisible and must be provided in full integers"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not divisible: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', Quantity: 203.202, Quantity reserved: 203.202, Quantity blocked: 203.202, Quantity announced: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "Quantity": "203.202",
                        "QuantityReserved": "203.202",
                        "QuantityBlocked": "203.202",
                        "QuantityAnnounced": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_IsBillOfMaterial": {
                    "description": "Operation not allowed for Bills of Material",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_IsBillOfMaterial",
                        "description": "Operation not allowed for Bills of Material"
                      },
                      "errorMessages": [
                        {
                          "message": "Invalid operation for bill of material products: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughStock": {
                    "description": "Not enough stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughStock",
                        "description": "Not enough stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughBlockedStock": {
                    "description": "Not enough blocked stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughBlockedStock",
                        "description": "Not enough blocked stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough blocked stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughAnnouncedStock": {
                    "description": "Not enough announced stock",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughAnnouncedStock",
                        "description": "Not enough announced stock"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough announced stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BatchSetForNonBatchProduct": {
                    "description": "A batch cannot be set on a non batch stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchSetForNonBatchProduct",
                        "description": "A batch cannot be set on a non batch stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is not a batch product but batch is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeSetForNonBestBeforeProduct": {
                    "description": "A bestBefore date cannot be set on a non bestBefore stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeSetForNonBestBeforeProduct",
                        "description": "A bestBefore date cannot be set on a non bestBefore stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' does not have a best before date but date is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_WrongChangeType": {
                    "description": "Wrong change type provided",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_WrongChangeType",
                        "description": "Wrong change type provided"
                      },
                      "errorMessages": [
                        {
                          "message": "ChangeType is ReservationCanceled but was expected to be Adjustment"
                        }
                      ],
                      "errorMetadata": {
                        "ChangeType": "ReservationCanceled",
                        "ExpectedChangeType": "Adjustment",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReferenceItems": {
                    "description": "One or more reference item is invalid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReferenceItems",
                        "description": "One or more reference item is invalid"
                      },
                      "errorMessages": [
                        {
                          "message": "Reference item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedNotZero": {
                    "description": "The reserved quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedNotZero",
                        "description": "The reserved quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotZero": {
                    "description": "Announced quantity for this product needs to be 0 for this operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotZero",
                        "description": "Announced quantity for this product needs to be 0 for this operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotZero": {
                    "description": "Qantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotZero",
                        "description": "Qantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotNegativ": {
                    "description": "Quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotNegativ",
                        "description": "Quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityBlockedNotZero": {
                    "description": "The blocked quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityBlockedNotZero",
                        "description": "The blocked quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity blocked is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedIsZeroOrNegativ": {
                    "description": "The reserved quantity must be greater than 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedIsZeroOrNegativ",
                        "description": "The reserved quantity must be greater than 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is 0 or below for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedIsZero": {
                    "description": "The announced quantity cannot be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedIsZero",
                        "description": "The announced quantity cannot be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotNegativ": {
                    "description": "The announced quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotNegativ",
                        "description": "The announced quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAndBlockedIsZero": {
                    "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAndBlockedIsZero",
                        "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity and blocked quantity is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidOutboundItem": {
                    "description": "The outbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidOutboundItem",
                        "description": "The outbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidInboundItem": {
                    "description": "The inbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidInboundItem",
                        "description": "The inbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReturnItem": {
                    "description": "An item in the return is not valid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReturnItem",
                        "description": "An item in the return is not valid"
                      },
                      "errorMessages": [
                        {
                          "message": "Return item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NoStockReserved": {
                    "description": "No reserved stock exists for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NoStockReserved",
                        "description": "No reserved stock exists for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock reservation not found: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughReservedStock": {
                    "description": "Not enough reserved stock is available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughReservedStock",
                        "description": "Not enough reserved stock is available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough reserved stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', reserved quantity: 203.202, reserved quantity to cancel: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "QuantityReserved": "203.202",
                        "QuantityReservedToCancel": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_MerchantSkuMustNotBeEmpty": {
                    "description": "A merchantSku must be given",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_MerchantSkuMustNotBeEmpty",
                        "description": "A merchantSku must be given"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock operation does not provide a merchantSku: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_StockLevelBlockedIsNegative": {
                    "description": "Stocklevel blocked must not be negative",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_StockLevelBlockedIsNegative",
                        "description": "Stocklevel blocked must not be negative"
                      },
                      "errorMessages": [
                        {
                          "message": "Stocklevel blocked must not be negative for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  },
                  "Returns_ReturnItemNotFound": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnItemNotFound",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": null
                        }
                      ],
                      "errorMetadata": {
                        "ReturnId": "MERC05SFERGF",
                        "ReturnItemId": "MERC05PosFDSE"
                      }
                    }
                  },
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnIsLocked": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnIsLocked",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": "This return is locked by User FULF until 2020-03-06T08:49:37.909+00:00"
                        }
                      ],
                      "errorMetadata": {
                        "LockedByUserId": "FULF",
                        "LockedUntil": "2020-03-06T08:49:37.909+00:00",
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockChange"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns/{returnId}/lock": {
      "put": {
        "tags": [
          "Returns"
        ],
        "summary": "Lock",
        "description": "Update a return",
        "operationId": "ReturnsLock",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectVersion",
            "in": "query",
            "description": "Last known modification date of this return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnIsLocked": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnIsLocked",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": "This return is locked by User FULF until 2020-03-06T08:49:37.909+00:00"
                        }
                      ],
                      "errorMetadata": {
                        "LockedByUserId": "FULF",
                        "LockedUntil": "2020-03-06T08:49:37.909+00:00",
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Shared_OutdatedObject": {
                    "description": "The given version of this object is outdated.",
                    "value": {
                      "errorCode": {
                        "code": "Shared_OutdatedObject",
                        "description": "The given version of this object is outdated."
                      },
                      "errorMessages": [
                        {
                          "message": "The given version of this object is outdated."
                        }
                      ],
                      "errorMetadata": {
                        "Pk": "string",
                        "CurrentObjectVersion": "2020-03-02T08:49:37.909+00:00",
                        "GivenObjectVersion": "2020-03-06T08:49:37.909+00:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns/{returnId}/unlock": {
      "put": {
        "tags": [
          "Returns"
        ],
        "summary": "Unlock",
        "description": "Update a return",
        "operationId": "ReturnsUnlock",
        "parameters": [
          {
            "name": "returnId",
            "in": "path",
            "description": "Return identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "objectVersion",
            "in": "query",
            "description": "Last known modification date of this return.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Returns_ReturnIsLocked": {
                    "description": "",
                    "value": {
                      "errorCode": {
                        "code": "Returns_ReturnIsLocked",
                        "description": ""
                      },
                      "errorMessages": [
                        {
                          "message": "This return is locked by User FULF until 2020-03-06T08:49:37.909+00:00"
                        }
                      ],
                      "errorMetadata": {
                        "LockedByUserId": "FULF",
                        "LockedUntil": "2020-03-06T08:49:37.909+00:00",
                        "ReturnId": "MERC05SFERGF"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Shared_OutdatedObject": {
                    "description": "The given version of this object is outdated.",
                    "value": {
                      "errorCode": {
                        "code": "Shared_OutdatedObject",
                        "description": "The given version of this object is outdated."
                      },
                      "errorMessages": [
                        {
                          "message": "The given version of this object is outdated."
                        }
                      ],
                      "errorMetadata": {
                        "Pk": "string",
                        "CurrentObjectVersion": "2020-03-02T08:49:37.909+00:00",
                        "GivenObjectVersion": "2020-03-06T08:49:37.909+00:00"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/returns/changes": {
      "get": {
        "tags": [
          "Returns"
        ],
        "summary": "Get Changes",
        "description": "Query returns for changes within a given timeframe.",
        "operationId": "ReturnsGetChanges",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentReturnChangeList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/shippingmethods": {
      "post": {
        "tags": [
          "ShippingMethods"
        ],
        "summary": "Post",
        "description": "Create a new shipping method",
        "operationId": "ShippingMethodsPost",
        "requestBody": {
          "description": "Details af the shipping method that has to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShippingMethodRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ShippingMethods_DuplicateShippingMethod": {
                    "description": "A shipping method with this id exists already",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_DuplicateShippingMethod",
                        "description": "A shipping method with this id exists already"
                      },
                      "errorMessages": [
                        {
                          "message": "Duplicate shipping method exists"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Shared_UserIsNotAFulfiller": {
                    "description": "The given user does not have the role of 'Fulfiller'",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UserIsNotAFulfiller",
                        "description": "The given user does not have the role of 'Fulfiller'"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' must be a fulfiller"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Shared_FulfillerMismatch": {
                    "description": "This object does not belong to this fulfiller",
                    "value": {
                      "errorCode": {
                        "code": "Shared_FulfillerMismatch",
                        "description": "This object does not belong to this fulfiller"
                      },
                      "errorMessages": [
                        {
                          "message": "This object does not belong to this fulfiller"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethod"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "ShippingMethods"
        ],
        "summary": "Get All",
        "description": "Get all shipping methods you specified",
        "operationId": "ShippingMethodsGetAll",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'shippingMethodId', 'name', 'carrierCode', 'carrierName', 'shippingType', 'fulfillerShippingMethodNumber'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedShippingMethodResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/shippingmethods/updates": {
      "get": {
        "tags": [
          "ShippingMethods"
        ],
        "summary": "Get Updates",
        "description": "Query shipping methods for changes within a given timeframe.",
        "operationId": "ShippingMethodsGetUpdates",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentShippingMethodList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/shippingmethods/{shippingMethodId}": {
      "get": {
        "tags": [
          "ShippingMethods"
        ],
        "summary": "Get",
        "description": "Get a specific shipping method",
        "operationId": "ShippingMethodsGet",
        "parameters": [
          {
            "name": "shippingMethodId",
            "in": "path",
            "description": "Shipping method identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ShippingMethods_ShippingMethodNotFound": {
                    "description": "The shipping method with this id does not exist",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_ShippingMethodNotFound",
                        "description": "The shipping method with this id does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethod"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "ShippingMethods"
        ],
        "summary": "Delete",
        "description": "Delete a shipping method",
        "operationId": "ShippingMethodsDelete",
        "parameters": [
          {
            "name": "shippingMethodId",
            "in": "path",
            "description": "Shipping method identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorizations_NoStandardShippingMethodAuthorized": {
                    "description": "At least one shippingMethod of type 'Standard' must be given when authorizing a warehouse to a merchant",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_NoStandardShippingMethodAuthorized",
                        "description": "At least one shippingMethod of type 'Standard' must be given when authorizing a warehouse to a merchant"
                      },
                      "errorMessages": [
                        {
                          "message": "The warehouse 'FULF04XX-12345-0001' must have at least one shipping method of type 'Standard'."
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001",
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  },
                  "Shared_UserIsNotAFulfiller": {
                    "description": "The given user does not have the role of 'Fulfiller'",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UserIsNotAFulfiller",
                        "description": "The given user does not have the role of 'Fulfiller'"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' must be a fulfiller"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Users_UserNotFound": {
                    "description": "The user does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Users_UserNotFound",
                        "description": "The user does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' not found"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Shared_FulfillerMismatch": {
                    "description": "This object does not belong to this fulfiller",
                    "value": {
                      "errorCode": {
                        "code": "Shared_FulfillerMismatch",
                        "description": "This object does not belong to this fulfiller"
                      },
                      "errorMessages": [
                        {
                          "message": "This object does not belong to this fulfiller"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ShippingMethods_ShippingMethodNotFound": {
                    "description": "The shipping method with this id does not exist",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_ShippingMethodNotFound",
                        "description": "The shipping method with this id does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "ShippingMethods"
        ],
        "summary": "Update",
        "description": "Update a shipping method",
        "operationId": "ShippingMethodsUpdate",
        "parameters": [
          {
            "name": "shippingMethodId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Details af the shipping method that has to be created",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShippingMethodRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "ShippingMethods_ShippingMethodNotFound": {
                    "description": "The shipping method with this id does not exist",
                    "value": {
                      "errorCode": {
                        "code": "ShippingMethods_ShippingMethodNotFound",
                        "description": "The shipping method with this id does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Shipping method 'FULF0A0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "ShippingMethodId": "FULF0A0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Authorizations_NoStandardShippingMethodAuthorized": {
                    "description": "At least one shippingMethod of type 'Standard' must be given when authorizing a warehouse to a merchant",
                    "value": {
                      "errorCode": {
                        "code": "Authorizations_NoStandardShippingMethodAuthorized",
                        "description": "At least one shippingMethod of type 'Standard' must be given when authorizing a warehouse to a merchant"
                      },
                      "errorMessages": [
                        {
                          "message": "The warehouse 'FULF04XX-12345-0001' must have at least one shipping method of type 'Standard'."
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001",
                        "MerchantId": "MERC",
                        "FulfillerId": "FULF"
                      }
                    }
                  },
                  "Shared_UserIsNotAFulfiller": {
                    "description": "The given user does not have the role of 'Fulfiller'",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UserIsNotAFulfiller",
                        "description": "The given user does not have the role of 'Fulfiller'"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' must be a fulfiller"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Shared_UpdateOperation": {
                    "description": "General failure in update procedure",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UpdateOperation",
                        "description": "General failure in update procedure"
                      },
                      "errorMessages": [
                        {
                          "message": "Unknown error in update operation occured"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Shared_FulfillerMismatch": {
                    "description": "This object does not belong to this fulfiller",
                    "value": {
                      "errorCode": {
                        "code": "Shared_FulfillerMismatch",
                        "description": "This object does not belong to this fulfiller"
                      },
                      "errorMessages": [
                        {
                          "message": "This object does not belong to this fulfiller"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  },
                  "Shared_ModelValidation": {
                    "description": "General validation exception",
                    "value": {
                      "errorCode": {
                        "code": "Shared_ModelValidation",
                        "description": "General validation exception"
                      },
                      "errorMessages": [
                        {
                          "message": "Model validation failed"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/stocks": {
      "get": {
        "tags": [
          "Stocks"
        ],
        "summary": "Get Stocks All",
        "description": "Get stock information of all products in all warehouses",
        "operationId": "StocksGetStocksAll",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'stockLevel', 'stockLevelAnnounced', 'stockLevelReserved', 'stockLevelBlocked', 'stockReservedDetails/outboundId', 'stockAnnouncedDetails/inboundId', 'warehouses/warehouseId', 'warehouses/stockLevel', 'warehouses/stockLevelAnnounced', 'warehouses/stockLevelReserved', 'warehouses/stockLevelBlocked', 'warehouses/stockReservedDetails/outboundId', 'warehouses/stockAnnouncedDetails/inboundId'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedStockResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/stocks/updates": {
      "get": {
        "tags": [
          "Stocks"
        ],
        "summary": "Get Recent Stock Changes Updates",
        "description": "Query stock changes for changes within a given timeframe.",
        "operationId": "StocksGetRecentStockChanges",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentStockChangeList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/stocks/{jfsku}": {
      "get": {
        "tags": [
          "Stocks"
        ],
        "summary": "Get Stock",
        "description": "Get stock information for a specific product",
        "operationId": "StocksGetStock",
        "parameters": [
          {
            "name": "jfsku",
            "in": "path",
            "description": "Product identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            </br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stock"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/stocks/{jfsku}/{warehouseId}": {
      "get": {
        "tags": [
          "Stocks"
        ],
        "summary": "Get Stock In Warehouse",
        "description": "Get stock information for a specific product in a specific warehouse",
        "operationId": "StocksGetStockInWarehouse",
        "parameters": [
          {
            "name": "jfsku",
            "in": "path",
            "description": "Product identifer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Warehouse identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockInWarehouse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/stocks/adjustments": {
      "post": {
        "tags": [
          "Stocks"
        ],
        "summary": "Post Adjustment",
        "description": "Adjust the stock of a product. Use this call as an exeptional way to change stock, for example if a lost product was found or a product has been destroyed.",
        "operationId": "StocksPostAdjustment",
        "requestBody": {
          "description": "The stock adjustment you want to perform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStockAdjustmentRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Products_ProductNotFound": {
                    "description": "The product does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Products_ProductNotFound",
                        "description": "The product does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' not found"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT"
                      }
                    }
                  },
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Shared_UserIsNotAFulfiller": {
                    "description": "The given user does not have the role of 'Fulfiller'",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UserIsNotAFulfiller",
                        "description": "The given user does not have the role of 'Fulfiller'"
                      },
                      "errorMessages": [
                        {
                          "message": "User 'FULF' must be a fulfiller"
                        }
                      ],
                      "errorMetadata": {
                        "UserId": "FULF"
                      }
                    }
                  },
                  "Credentials_DuplicateCredential": {
                    "description": "Credentials with this id already exist",
                    "value": {
                      "errorCode": {
                        "code": "Credentials_DuplicateCredential",
                        "description": "Credentials with this id already exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Credential '34374583abd4532' already exists"
                        }
                      ],
                      "errorMetadata": {
                        "CredentialId": "34374583abd4532"
                      }
                    }
                  },
                  "Stocks_BatchNotSet": {
                    "description": "A batch must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchNotSet",
                        "description": "A batch must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is a batch product but batch is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeNotSet": {
                    "description": "A bestBefore date must be set for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeNotSet",
                        "description": "A bestBefore date must be set for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' has a best before date but date is not set in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_ProductIsNotDivisible": {
                    "description": "The products quantity is not divisible and must be provided in full integers",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_ProductIsNotDivisible",
                        "description": "The products quantity is not divisible and must be provided in full integers"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not divisible: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', Quantity: 203.202, Quantity reserved: 203.202, Quantity blocked: 203.202, Quantity announced: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "Quantity": "203.202",
                        "QuantityReserved": "203.202",
                        "QuantityBlocked": "203.202",
                        "QuantityAnnounced": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_IsBillOfMaterial": {
                    "description": "Operation not allowed for Bills of Material",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_IsBillOfMaterial",
                        "description": "Operation not allowed for Bills of Material"
                      },
                      "errorMessages": [
                        {
                          "message": "Invalid operation for bill of material products: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughStock": {
                    "description": "Not enough stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughStock",
                        "description": "Not enough stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughBlockedStock": {
                    "description": "Not enough blocked stock available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughBlockedStock",
                        "description": "Not enough blocked stock available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough blocked stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughAnnouncedStock": {
                    "description": "Not enough announced stock",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughAnnouncedStock",
                        "description": "Not enough announced stock"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough announced stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BatchSetForNonBatchProduct": {
                    "description": "A batch cannot be set on a non batch stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BatchSetForNonBatchProduct",
                        "description": "A batch cannot be set on a non batch stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' is not a batch product but batch is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_BestBeforeSetForNonBestBeforeProduct": {
                    "description": "A bestBefore date cannot be set on a non bestBefore stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_BestBeforeSetForNonBestBeforeProduct",
                        "description": "A bestBefore date cannot be set on a non bestBefore stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Product 'MERC01PRDCT' does not have a best before date but date is in stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_WrongChangeType": {
                    "description": "Wrong change type provided",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_WrongChangeType",
                        "description": "Wrong change type provided"
                      },
                      "errorMessages": [
                        {
                          "message": "ChangeType is ReservationCanceled but was expected to be Adjustment"
                        }
                      ],
                      "errorMetadata": {
                        "ChangeType": "ReservationCanceled",
                        "ExpectedChangeType": "Adjustment",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReferenceItems": {
                    "description": "One or more reference item is invalid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReferenceItems",
                        "description": "One or more reference item is invalid"
                      },
                      "errorMessages": [
                        {
                          "message": "Reference item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedNotZero": {
                    "description": "The reserved quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedNotZero",
                        "description": "The reserved quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotZero": {
                    "description": "Announced quantity for this product needs to be 0 for this operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotZero",
                        "description": "Announced quantity for this product needs to be 0 for this operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotZero": {
                    "description": "Qantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotZero",
                        "description": "Qantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityNotNegativ": {
                    "description": "Quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityNotNegativ",
                        "description": "Quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityBlockedNotZero": {
                    "description": "The blocked quantity must be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityBlockedNotZero",
                        "description": "The blocked quantity must be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity blocked is not 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityReservedIsZeroOrNegativ": {
                    "description": "The reserved quantity must be greater than 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityReservedIsZeroOrNegativ",
                        "description": "The reserved quantity must be greater than 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity reserved is 0 or below for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedIsZero": {
                    "description": "The announced quantity cannot be 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedIsZero",
                        "description": "The announced quantity cannot be 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAnnouncedNotNegativ": {
                    "description": "The announced quantity must be negative for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAnnouncedNotNegativ",
                        "description": "The announced quantity must be negative for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity announced is not below 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_QuantityAndBlockedIsZero": {
                    "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_QuantityAndBlockedIsZero",
                        "description": "Either quantity or quantiyBlocked must be non 0 for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Quantity and blocked quantity is 0 for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidOutboundItem": {
                    "description": "The outbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidOutboundItem",
                        "description": "The outbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Outbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidInboundItem": {
                    "description": "The inbound item is invalid for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidInboundItem",
                        "description": "The inbound item is invalid for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Inbound item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_InvalidReturnItem": {
                    "description": "An item in the return is not valid",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_InvalidReturnItem",
                        "description": "An item in the return is not valid"
                      },
                      "errorMessages": [
                        {
                          "message": "Return item invalid: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NoStockReserved": {
                    "description": "No reserved stock exists for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NoStockReserved",
                        "description": "No reserved stock exists for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock reservation not found: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_NotEnoughReservedStock": {
                    "description": "Not enough reserved stock is available for this stock operation",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_NotEnoughReservedStock",
                        "description": "Not enough reserved stock is available for this stock operation"
                      },
                      "errorMessages": [
                        {
                          "message": "Not enough reserved stock available: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004', reserved quantity: 203.202, reserved quantity to cancel: 203.202"
                        }
                      ],
                      "errorMetadata": {
                        "QuantityReserved": "203.202",
                        "QuantityReservedToCancel": "203.202",
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_MerchantSkuMustNotBeEmpty": {
                    "description": "A merchantSku must be given",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_MerchantSkuMustNotBeEmpty",
                        "description": "A merchantSku must be given"
                      },
                      "errorMessages": [
                        {
                          "message": "Stock operation does not provide a merchantSku: Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  },
                  "Stocks_StockLevelBlockedIsNegative": {
                    "description": "Stocklevel blocked must not be negative",
                    "value": {
                      "errorCode": {
                        "code": "Stocks_StockLevelBlockedIsNegative",
                        "description": "Stocklevel blocked must not be negative"
                      },
                      "errorMessages": [
                        {
                          "message": "Stocklevel blocked must not be negative for Product 'MERC01PRDCT', Warehouse 'FULF04XX-12345-0001', Stock Operation 'BK23004'"
                        }
                      ],
                      "errorMetadata": {
                        "Jfsku": "MERC01PRDCT",
                        "FulfillerStockChangeId": "BK23004",
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StockChange"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/stocks/changes": {
      "get": {
        "tags": [
          "Stocks"
        ],
        "summary": "Get Stock Changes All",
        "description": "Get all stock changes",
        "operationId": "StocksGetStockChangesAll",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'fulfillerStockChangeId', 'fulfillerTimestamp', 'stockLevel', 'stockLevelReserved', 'stockLevelBlocked', 'quantity', 'quantityReserved', 'quantityBlocked', 'quantityAnnounced', 'stockLevelAnnounced', 'changeType', 'current', 'stockChangeId/warehouseId', 'stockChangeId/jfsku', 'inboundItem/inboundId', 'outboundItem/outboundId', 'outboundShippingNotificationItem/outboundShippingNotificationId'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedStockChangeWithProductResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/stocks/changes/{warehouseId}": {
      "get": {
        "tags": [
          "Stocks"
        ],
        "summary": "Get Stock Changes In Warehouse All",
        "description": "Get stock changes in a specific warehouse",
        "operationId": "StocksGetStockChangesInWarehouseAll",
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Warehouse identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'fulfillerStockChangeId', 'fulfillerTimestamp', 'stockLevel', 'stockLevelReserved', 'stockLevelBlocked', 'stockLevelAnnounced', 'quantity', 'quantityReserved', 'quantityBlocked', 'quantityAnnounced', 'changeType', 'stockChangeId/warehouseId', 'stockChangeId/jfsku', 'inboundItem/inboundId', 'outboundItem/outboundId', 'outboundShippingNotificationItem/outboundShippingNotificationId'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedStockChangeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/stocks/warehouse/{warehouseId}": {
      "get": {
        "tags": [
          "Stocks"
        ],
        "summary": "Get Stocks In Warehouse All",
        "description": "Get stock information in a specific warehouse",
        "operationId": "StocksGetStocksInWarehouseAll",
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Warehouse identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'warehouseId', 'stockLevel', 'stockLevelAnnounced', 'stockLevelReserved', 'stockLevelBlocked', 'stockReservedDetails/outboundId', 'stockAnnouncedDetails/inboundId'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedStockInWarehouseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/warehouses": {
      "post": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Post",
        "description": "Create a new warehouse",
        "operationId": "WarehousesPost",
        "requestBody": {
          "description": "Details of the warehouse you want to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWarehouseRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Warehouse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Get All",
        "description": "Get all your warehouses",
        "operationId": "WarehousesGetAll",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "number of elements returned by the request",
            "schema": {
              "type": "integer",
              "default": 50
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "offset",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "<h5>allowed fields</h5> \r\n                            'warehouseId', 'fulfillerId', 'name', 'address/lastname', 'address/company', 'address/city', 'address/email'</br>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$select",
            "in": "query",
            "description": "select fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$orderBy",
            "in": "query",
            "description": "order result by field",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagedWarehouseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/warehouses/updates": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Get Updates",
        "description": "Query warehouses for changes within a given timeframe.",
        "operationId": "WarehousesGetUpdates",
        "parameters": [
          {
            "name": "fromDate",
            "in": "query",
            "description": "The start date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "The end date of the timeframe.",
            "schema": {
              "type": "string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page number.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ignoreOwnApplicationId",
            "in": "query",
            "description": "If true, modifications from your own application-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "ignoreOwnUserId",
            "in": "query",
            "description": "If true, modifications from your own user-id will not be returned",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentWarehouseList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/fulfiller/warehouses/{warehouseId}": {
      "get": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Get",
        "description": "Get a specific warehouse",
        "operationId": "WarehousesGet",
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Warehouse identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Warehouse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Delete",
        "description": "Delete a warehouse",
        "operationId": "WarehousesDelete",
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Warehouse identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Shared_OperationForbidden": {
                    "description": "The operation is not allowed",
                    "value": {
                      "errorCode": {
                        "code": "Shared_OperationForbidden",
                        "description": "The operation is not allowed"
                      },
                      "errorMessages": [
                        {
                          "message": "Operation is not available or not allowed"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseStillAuthorized": {
                    "description": "The warehouse still has authorizations",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseStillAuthorized",
                        "description": "The warehouse still has authorizations"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' still has authorizations"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "tags": [
          "Warehouses"
        ],
        "summary": "Update",
        "description": "Update information of an existing warehouse",
        "operationId": "WarehousesUpdate",
        "parameters": [
          {
            "name": "warehouseId",
            "in": "path",
            "description": "Warehouse identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Your warehouse will be updated with that details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWarehouseRequest"
              }
            }
          }
        },
        "responses": {
          "503": {
            "description": "Server Error"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Warehouses_WarehouseNotFound": {
                    "description": "The warehouse does not exist",
                    "value": {
                      "errorCode": {
                        "code": "Warehouses_WarehouseNotFound",
                        "description": "The warehouse does not exist"
                      },
                      "errorMessages": [
                        {
                          "message": "Warehouse 'FULF04XX-12345-0001' not found"
                        }
                      ],
                      "errorMetadata": {
                        "WarehouseId": "FULF04XX-12345-0001"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "BadRequest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Shared_UpdateOperation": {
                    "description": "General failure in update procedure",
                    "value": {
                      "errorCode": {
                        "code": "Shared_UpdateOperation",
                        "description": "General failure in update procedure"
                      },
                      "errorMessages": [
                        {
                          "message": "Unknown error in update operation occured"
                        }
                      ],
                      "errorMetadata": { }
                    }
                  }
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "required": [
          "city",
          "country",
          "street"
        ],
        "type": "object",
        "properties": {
          "salutation": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Salutation",
            "nullable": true,
            "example": "Mr"
          },
          "firstname": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Firstname",
            "nullable": true,
            "example": "Rick"
          },
          "lastname": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Lastname",
            "nullable": true,
            "example": "Sanchez"
          },
          "company": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Company",
            "nullable": true,
            "example": "Rickcorp LLC"
          },
          "street": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Street",
            "example": "Mortystreet 1"
          },
          "city": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "City",
            "example": "Mortytown"
          },
          "zip": {
            "maxLength": 255,
            "minLength": 1,
            "uniqueItems": false,
            "type": "string",
            "description": "Zip Code",
            "nullable": true,
            "example": "12345"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "uniqueItems": false,
            "type": "string",
            "description": "Country",
            "format": "ISO 3166 alpha-2",
            "example": "DE"
          },
          "email": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Email address",
            "nullable": true,
            "example": "rick.sanchez@jtl-software.com"
          },
          "phone": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Phone number",
            "nullable": true,
            "example": "+49 123456789"
          },
          "extraLine": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Second additional address line",
            "nullable": true,
            "example": "Don't hand over to Mortys"
          },
          "extraAddressLine": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "First additional address line",
            "nullable": true,
            "example": "Behind the Shoneys"
          },
          "state": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "State",
            "nullable": true,
            "example": "Dimension C-132"
          },
          "mobile": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Mobile phone number",
            "nullable": true,
            "example": "+49 123456789"
          },
          "fax": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Fax number",
            "nullable": true,
            "example": "+49 123456789"
          }
        },
        "description": "A postal address (One of company or lastname must be given)",
        "nullable": true
      },
      "Attribute": {
        "required": [
          "attributeType",
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Key of the attribute",
            "example": "Importance"
          },
          "value": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Value of the attribute",
            "example": "High"
          },
          "attributeType": {
            "$ref": "#/components/schemas/AttributeType"
          }
        },
        "description": "An attribute a typified key/value pair. It is used as a custom fields",
        "nullable": true
      },
      "AttributeType": {
        "enum": [
          "String",
          "Integer",
          "Decimal",
          "Boolean",
          "Date"
        ],
        "type": "string"
      },
      "Authorization": {
        "required": [
          "merchantId",
          "warehouses"
        ],
        "type": "object",
        "properties": {
          "merchantId": {
            "maxLength": 4,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant identifier",
            "example": "MERC"
          },
          "warehouses": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WarehouseAuthorization"
            },
            "description": "Warehouse identifier"
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        },
        "description": "Object including the merchant authorization and the merchant's warehouse authorizations",
        "nullable": true
      },
      "AuthorizedShippingMethod": {
        "required": [
          "createdAt",
          "shippingMethodId"
        ],
        "type": "object",
        "properties": {
          "shippingMethodId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "example": "FULF0A0001"
          },
          "createdAt": {
            "uniqueItems": false,
            "type": "string",
            "format": "date-time",
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "nullable": true
      },
      "BestBefore": {
        "required": [
          "day",
          "month",
          "year"
        ],
        "type": "object",
        "properties": {
          "year": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Year of best before date",
            "format": "int32",
            "example": 1989
          },
          "month": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Month of best before date",
            "format": "int32",
            "example": 11
          },
          "day": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Day of best before date",
            "format": "int32",
            "example": 22
          }
        },
        "description": "Best Before container",
        "nullable": true
      },
      "BillOfMaterialsComponent": {
        "required": [
          "jfsku",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01BOMCHILD"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of the set item within this set",
            "format": "decimal",
            "example": 203.202
          }
        },
        "description": "A set item. This is a component of a set",
        "nullable": true
      },
      "ChangeOutboundStatusRequest": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "minLength": 1,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOutboundStatusRequest"
            }
          }
        },
        "description": "This reqest changes the status of an outbound. For example if an outbound started to be picked",
        "nullable": true
      },
      "ChangeStatusRequest": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "uniqueItems": false,
            "enum": [
              "Acknowledged",
              "Locked",
              "Pickprocess",
              "Canceled",
              "PartiallyCanceled"
            ],
            "type": "string",
            "example": "Acknowledged"
          },
          "cancelReasonCode": {
            "uniqueItems": false,
            "type": "string",
            "description": "Set the cancel reason code. Only allowed, when the outbound is set to \"Canceled\" When no code is given the cancel reason code is set to None.",
            "default": "None",
            "example": "DeliveryAdressUnknown"
          },
          "cancelReason": {
            "uniqueItems": false,
            "type": "string",
            "description": "Custom cancel reason string",
            "nullable": true,
            "example": "Unknown Address"
          }
        },
        "description": "This reqest changes the status of an outbound. For example if an outbound started to be picked",
        "nullable": true
      },
      "ChangeWarehouseRequest": {
        "required": [
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          }
        },
        "description": "This request changes the outgoing warehouse for an outbound",
        "nullable": true
      },
      "ChangedOutboundStatus": {
        "required": [
          "outboundId",
          "status"
        ],
        "type": "object",
        "properties": {
          "outboundId": {
            "maxLength": 255,
            "minLength": 7,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound identifier",
            "example": "MERC02AXEV"
          },
          "status": {
            "$ref": "#/components/schemas/OutboundStatusType"
          },
          "errorCode": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "Outbound_StatusChangeForbidden"
          },
          "objectVersion": {
            "uniqueItems": false,
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "description": "An order that has to be shipped from your warehouse",
        "nullable": true
      },
      "ConditionType": {
        "enum": [
          "Unknown",
          "Default",
          "Refurbished",
          "Used",
          "Damaged"
        ],
        "type": "string"
      },
      "CreateAddressRequest": {
        "required": [
          "city",
          "country",
          "street"
        ],
        "type": "object",
        "properties": {
          "salutation": {
            "uniqueItems": false,
            "type": "string",
            "description": "Salutation",
            "nullable": true,
            "example": "Mr"
          },
          "firstname": {
            "uniqueItems": false,
            "type": "string",
            "description": "Firstname",
            "nullable": true,
            "example": "Rick"
          },
          "lastname": {
            "uniqueItems": false,
            "type": "string",
            "description": "Lastname",
            "nullable": true,
            "example": "Sanchez"
          },
          "company": {
            "uniqueItems": false,
            "type": "string",
            "description": "Company",
            "nullable": true,
            "example": "Rickcorp LLC"
          },
          "street": {
            "uniqueItems": false,
            "type": "string",
            "description": "Street",
            "example": "Mortystreet 1"
          },
          "city": {
            "uniqueItems": false,
            "type": "string",
            "description": "City",
            "example": "Mortytown"
          },
          "zip": {
            "maxLength": 255,
            "minLength": 1,
            "uniqueItems": false,
            "type": "string",
            "description": "Zip Code",
            "nullable": true,
            "example": "12345"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "uniqueItems": false,
            "type": "string",
            "description": "Country",
            "format": "ISO 3166 alpha-2",
            "example": "DE"
          },
          "email": {
            "uniqueItems": false,
            "type": "string",
            "description": "Email address",
            "nullable": true,
            "example": "rick.sanchez@jtl-software.com"
          },
          "phone": {
            "uniqueItems": false,
            "type": "string",
            "description": "Phone number",
            "nullable": true,
            "example": "+49 123456789"
          },
          "extraLine": {
            "uniqueItems": false,
            "type": "string",
            "description": "Second additional address line",
            "nullable": true,
            "example": "Don't hand over to Mortys"
          },
          "extraAddressLine": {
            "uniqueItems": false,
            "type": "string",
            "description": "First additional address line",
            "nullable": true,
            "example": "Behind the Shoneys"
          },
          "state": {
            "uniqueItems": false,
            "type": "string",
            "description": "State",
            "nullable": true,
            "example": "Dimension C-132"
          },
          "mobile": {
            "uniqueItems": false,
            "type": "string",
            "description": "Mobile phone number",
            "nullable": true,
            "example": "+49 123456789"
          },
          "fax": {
            "uniqueItems": false,
            "type": "string",
            "description": "Fax number",
            "nullable": true,
            "example": "+49 123456789"
          }
        },
        "description": "A postal address (One of company or lastname must be given)"
      },
      "CreateAmazonSfpShippingLabelDataRequest": {
        "required": [
          "carrierWillPickUp",
          "deliveryExperience",
          "dimensions",
          "insurance",
          "useWarehouseAddressForSenderAddress",
          "weight"
        ],
        "type": "object",
        "properties": {
          "carrierWillPickUp": {
            "uniqueItems": false,
            "type": "boolean",
            "default": true,
            "example": false
          },
          "insurance": {
            "uniqueItems": false,
            "type": "boolean",
            "default": false,
            "example": false
          },
          "useWarehouseAddressForSenderAddress": {
            "uniqueItems": false,
            "type": "boolean",
            "default": false,
            "example": false
          },
          "deliveryExperience": {
            "$ref": "#/components/schemas/DeliveryExperienceType"
          },
          "shippingServiceId": {
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "DPDDE_PTP_PRIME_STD_DOM"
          },
          "weight": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "example": 5.5
          },
          "dimensions": {
            "$ref": "#/components/schemas/CreateOutboundShippingPackageDimensionsRequest"
          }
        }
      },
      "CreateAuthorizedShippingMethodRequest": {
        "required": [
          "shippingMethodId"
        ],
        "type": "object",
        "properties": {
          "shippingMethodId": {
            "maxLength": 255,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "example": "FULF0A0001"
          }
        },
        "nullable": true
      },
      "CreateBestBeforeRequest": {
        "required": [
          "day",
          "month",
          "year"
        ],
        "type": "object",
        "properties": {
          "year": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Year of best before date",
            "format": "int32",
            "example": 1989
          },
          "month": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Month of best before date",
            "format": "int32",
            "example": 11
          },
          "day": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Day of best before date",
            "format": "int32",
            "example": 22
          }
        },
        "description": "Best Before container",
        "nullable": true
      },
      "CreateIncomingGoodsBulkRequest": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "minLength": 1,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateIncomingGoodsItemRequest"
            },
            "description": "Collection of incoming goods items"
          }
        },
        "description": "A collection of items in an incoming-goods request. These items arrived at your warehouse.",
        "nullable": true
      },
      "CreateIncomingGoodsItemRequest": {
        "required": [
          "fulfillerTimestamp",
          "jfsku",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "quantityBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "This quantity exists in the warehouse but is not available for shipment yet",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "This quantity is available for shipment",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the inbound",
            "nullable": true,
            "example": "This is a custom note."
          },
          "batch": {
            "uniqueItems": false,
            "type": "string",
            "description": "The product batch of the stock adjustment",
            "nullable": true,
            "example": "Elor"
          },
          "bestBefore": {
            "$ref": "#/components/schemas/CreateBestBeforeRequest"
          },
          "fulfillerTimestamp": {
            "uniqueItems": false,
            "type": "string",
            "description": "Internal timestamp of the fulfiller when he has performed that stock adjustment",
            "format": "date-time",
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "fulfillerStockChangeId": {
            "uniqueItems": false,
            "type": "string",
            "description": "The stock change id of the fulfiller",
            "nullable": true,
            "example": "BK23004"
          }
        },
        "description": "An item in an incoming-goods request. This item arrived at your warehouse",
        "nullable": true
      },
      "CreateIncomingReturnItemRequest": {
        "required": [
          "fulfillerTimestamp",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "warehouseId": {
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "quantityBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "This quantity exists in the warehouse but is not available for shipment yet",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "This quantity is available for shipment",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "note": {
            "uniqueItems": false,
            "type": "string",
            "description": "Note of that stock adjustment",
            "nullable": true,
            "example": "The Interdimensional Goggles are a gadget created by Rick to observe realities across different dimensions by matching it to the wearer's DNA."
          },
          "batch": {
            "uniqueItems": false,
            "type": "string",
            "description": "The product batch of the stock adjustment",
            "nullable": true,
            "example": "Elor"
          },
          "bestBefore": {
            "$ref": "#/components/schemas/CreateBestBeforeRequest"
          },
          "fulfillerTimestamp": {
            "uniqueItems": false,
            "type": "string",
            "description": "Internal timestamp of the fulfiller when he has performed that stock adjustment",
            "format": "date-time",
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "fulfillerStockChangeId": {
            "uniqueItems": false,
            "type": "string",
            "description": "The stock change id of the fulfiller",
            "nullable": true,
            "example": "BK23004"
          }
        },
        "nullable": true
      },
      "CreateOutboundShippingNotificationItemRequest": {
        "required": [
          "quantity"
        ],
        "type": "object",
        "properties": {
          "merchantSku": {
            "uniqueItems": false,
            "type": "string",
            "description": "SKU (Stock Keeping Unit) of the merchant One of Jfsku or merchantSku must be given",
            "nullable": true,
            "example": "ART2394871"
          },
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "nullable": true,
            "example": "MERC01PRDCT"
          },
          "warehouseId": {
            "uniqueItems": false,
            "type": "string",
            "description": "WarehouseId",
            "nullable": true,
            "example": "FULF04XX-12345-0001"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of the item which has been shipped within that outbound shipping notification",
            "format": "decimal",
            "example": 203.202
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the outbound shipping notification",
            "nullable": true,
            "example": "This is a custom note."
          },
          "bestBefore": {
            "$ref": "#/components/schemas/CreateBestBeforeRequest"
          },
          "batch": {
            "uniqueItems": false,
            "type": "string",
            "description": "Batch of the item within the outbound shipping notification",
            "nullable": true,
            "example": "Elor"
          },
          "serialnumbers": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "description": "Serial numbers of the item within the outbound shipping notification",
            "nullable": true,
            "example": [
              "SN-21323",
              "SN-254312",
              "SN-42344"
            ]
          }
        },
        "description": "An item of an outbound that has been shipped within the shipping notification",
        "nullable": true
      },
      "CreateOutboundShippingNotificationRequest": {
        "required": [
          "fulfillerShippingNotificationNumber",
          "items",
          "packages"
        ],
        "type": "object",
        "properties": {
          "outboundShippingNotificationId": {
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound shipping notification identifier If not provided, one will be generated.",
            "nullable": true,
            "example": "FULF062CMSF79GV8"
          },
          "fulfillerShippingNotificationNumber": {
            "uniqueItems": false,
            "type": "string",
            "description": "Fulfiller outbound shipping notification number",
            "example": "SH-123-002"
          },
          "items": {
            "minLength": 1,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOutboundShippingNotificationItemRequest"
            },
            "description": "Affected items by the shipping notification"
          },
          "packages": {
            "minLength": 1,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateOutboundShippingPackageRequest"
            },
            "description": "Information about packages in the shipment notification"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of an outbound shipping notification",
            "nullable": true,
            "example": "This is a custom note."
          }
        },
        "description": "Declare an outound as shipped providing shipment information",
        "nullable": true
      },
      "CreateOutboundShippingPackageDimensionsRequest": {
        "required": [
          "height",
          "length",
          "width"
        ],
        "type": "object",
        "properties": {
          "width": {
            "uniqueItems": false,
            "type": "number",
            "description": "Width",
            "format": "decimal",
            "example": 0
          },
          "length": {
            "uniqueItems": false,
            "type": "number",
            "description": "Length",
            "format": "decimal",
            "example": 0
          },
          "height": {
            "uniqueItems": false,
            "type": "number",
            "description": "Height",
            "format": "decimal",
            "example": 0
          }
        },
        "description": "Dimensions of a product",
        "nullable": true
      },
      "CreateOutboundShippingPackageRequest": {
        "required": [
          "shippingDate",
          "shippingMethodId"
        ],
        "type": "object",
        "properties": {
          "freightOption": {
            "$ref": "#/components/schemas/FreightOptionType"
          },
          "estimatedDeliveryDate": {
            "uniqueItems": false,
            "type": "string",
            "description": "Estimated delivery date for that package",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of that package",
            "nullable": true,
            "example": "This is a custom note."
          },
          "trackingUrl": {
            "uniqueItems": false,
            "type": "string",
            "description": "Tracking URL for that package",
            "nullable": true,
            "example": "http://nolp.dhl.de/nextt-online-public/set_identcodes.do?lang=de&idc=TR123456789"
          },
          "identifier": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreatePackageIdentifierRequest"
            },
            "description": "Package identifier container",
            "nullable": true
          },
          "shippingDate": {
            "uniqueItems": false,
            "type": "string",
            "description": "Shipping date of the package",
            "format": "date-time",
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "shippingMethodId": {
            "maxLength": 255,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Shipping method identifier",
            "example": "FULF0A0001"
          },
          "dimensions": {
            "$ref": "#/components/schemas/CreateOutboundShippingPackageDimensionsRequest"
          },
          "weight": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 5.5
          }
        },
        "description": "A package of an outbound that has been used within the shipping notification",
        "nullable": true
      },
      "CreateOutboundStatusRequest": {
        "required": [
          "outboundId",
          "status"
        ],
        "type": "object",
        "properties": {
          "outboundId": {
            "maxLength": 255,
            "minLength": 7,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound identifier",
            "example": "MERC02AXEV"
          },
          "status": {
            "uniqueItems": false,
            "enum": [
              "Acknowledged",
              "Locked",
              "Pickprocess",
              "Canceled",
              "PartiallyCanceled"
            ],
            "type": "string",
            "example": "Acknowledged"
          },
          "cancelReasonCode": {
            "uniqueItems": false,
            "type": "string",
            "description": "Set the cancel reason code. Only allowed, when the outbound is set to \"Canceled\" When no code is given the cancel reason code is set to None.",
            "default": "None",
            "example": "DeliveryAdressUnknown"
          },
          "cancelReason": {
            "uniqueItems": false,
            "type": "string",
            "description": "Custom cancel reason string",
            "nullable": true,
            "example": "Unknown Address"
          },
          "objectVersion": {
            "uniqueItems": false,
            "type": "string",
            "description": "Last known modification date of this outbound.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "description": "An order that has to be shipped from your warehouse",
        "nullable": true
      },
      "CreatePackageIdentifierRequest": {
        "required": [
          "identifierType",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "uniqueItems": false,
            "type": "string",
            "description": "The value of the package identifier",
            "example": "TR123456789"
          },
          "identifierType": {
            "$ref": "#/components/schemas/IdentifierType"
          },
          "name": {
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the identifier",
            "nullable": true,
            "example": "string"
          }
        },
        "description": "A package can have several identifiers at the same type. The package identifier helps the fulfiller to identify an (partial) inbound arrival at his warehouse",
        "nullable": true
      },
      "CreateRelatedProductRequest": {
        "required": [
          "condition"
        ],
        "type": "object",
        "properties": {
          "condition": {
            "uniqueItems": false,
            "enum": [
              "Default",
              "Refurbished",
              "Used",
              "Damaged"
            ],
            "type": "string"
          }
        },
        "nullable": true
      },
      "CreateReturnItemRequest": {
        "required": [
          "jfsku",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "returnItemId": {
            "uniqueItems": false,
            "type": "string",
            "description": "The SKU (stock keeping unit) of the merchant for that outbound item",
            "nullable": true,
            "example": "MERC05PosFDSE"
          },
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "outboundId": {
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "MERC02AXEV"
          },
          "outboundItemId": {
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound item identifier",
            "nullable": true,
            "example": "5"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of that outbound item. This quantity of that item shall be shipped to the customer",
            "format": "decimal",
            "example": 203.202
          },
          "reason": {
            "$ref": "#/components/schemas/ReturnReasonType"
          },
          "reasonNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Internal note of the outbound. This note is for the fulfiller only",
            "nullable": true,
            "example": "This is a custom note."
          }
        },
        "nullable": true
      },
      "CreateReturnItemSplitRequest": {
        "required": [
          "quantity"
        ],
        "type": "object",
        "properties": {
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of that return item.",
            "format": "decimal",
            "example": 203.202
          },
          "returnItemId": {
            "uniqueItems": false,
            "type": "string",
            "description": "The SKU (stock keeping unit) of the merchant for that outbound item",
            "nullable": true,
            "example": "MERC05PosFDSE"
          }
        },
        "nullable": true
      },
      "CreateReturnRequest": {
        "required": [
          "customerAddress",
          "fulfillerReturnNumber",
          "items",
          "merchantId",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "returnId": {
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "MERC05SFERGF"
          },
          "merchantId": {
            "uniqueItems": false,
            "type": "string",
            "example": "MERC"
          },
          "warehouseId": {
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse must be from the fulfiller who delivered the outbound",
            "example": "FULF04XX-12345-0001"
          },
          "internalNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Internal note of the outbound. This note is for the fulfiller only",
            "nullable": true,
            "example": "This is a custom note."
          },
          "externalNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "External note of the outbound. This note can be shown to the customer who will receive the shipment",
            "nullable": true,
            "example": "This is a custom note."
          },
          "fulfillerReturnNumber": {
            "uniqueItems": false,
            "type": "string",
            "example": "string"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/CreateAddressRequest"
          },
          "items": {
            "minLength": 1,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateReturnItemRequest"
            }
          },
          "contact": {
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "string"
          }
        },
        "description": "Creates a return",
        "nullable": true
      },
      "CreateShippingLabelDataRequest": {
        "required": [
          "amazonSfpShippingLabelData"
        ],
        "type": "object",
        "properties": {
          "amazonSfpShippingLabelData": {
            "$ref": "#/components/schemas/CreateAmazonSfpShippingLabelDataRequest"
          }
        },
        "nullable": true
      },
      "CreateShippingMethodRequest": {
        "required": [
          "fulfillerShippingMethodNumber",
          "name",
          "shippingType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the shipping method",
            "example": "DHL package"
          },
          "shippingType": {
            "$ref": "#/components/schemas/ShippingType"
          },
          "trackingUrlSchema": {
            "uniqueItems": false,
            "type": "string",
            "description": "Tracking URL schema for dynamic tracking URL creation",
            "nullable": true,
            "example": "http://nolp.dhl.de/nextt-online-public/set_identcodes.do?lang=de&idc=#TrackingId#"
          },
          "carrierCode": {
            "uniqueItems": false,
            "type": "string",
            "description": "Carrier Code of the shipping method",
            "nullable": true,
            "example": "DHL"
          },
          "carrierName": {
            "uniqueItems": false,
            "type": "string",
            "description": "Carrier name of the shipping method",
            "nullable": true,
            "example": "DHL"
          },
          "cutoffTime": {
            "uniqueItems": false,
            "type": "string",
            "description": "Cut off time of the shipping method. The cut off time is the lastest time an outbound can arrive at JTL-Fulfillment network so that the outbound will be shipped and handed over to the carrier",
            "format": "date-span",
            "nullable": true,
            "example": "14:00"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the shipping method",
            "nullable": true,
            "example": "This is a custom note."
          },
          "fulfillerShippingMethodNumber": {
            "uniqueItems": false,
            "type": "string",
            "example": "FSM-0001"
          }
        },
        "description": "Creates a new shipping methos",
        "nullable": true
      },
      "CreateStockAdjustmentRequest": {
        "required": [
          "fulfillerTimestamp",
          "jfsku",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "fulfillerStockChangeId": {
            "uniqueItems": false,
            "type": "string",
            "description": "The stock change id of the fulfiller",
            "nullable": true,
            "example": "BK23004"
          },
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "This quantity is available for shipment",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "quantityBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "This quantity exists in the warehouse but is not available for shipment yet",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "batch": {
            "uniqueItems": false,
            "type": "string",
            "description": "The product batch of the stock adjustment",
            "nullable": true,
            "example": "Elor"
          },
          "bestBefore": {
            "$ref": "#/components/schemas/CreateBestBeforeRequest"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of that stock adjustment",
            "nullable": true,
            "example": "This is a custom note."
          },
          "fulfillerTimestamp": {
            "uniqueItems": false,
            "type": "string",
            "description": "Internal timestamp of the fulfiller when he has performed that stock adjustment",
            "format": "date-time",
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "description": "Creates a stock adjustment",
        "nullable": true
      },
      "CreateWarehouseRequest": {
        "required": [
          "address",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the warehouse",
            "example": "Garage laboratory"
          },
          "address": {
            "$ref": "#/components/schemas/CreateAddressRequest"
          }
        },
        "description": "Creates a new warehouse",
        "nullable": true
      },
      "DeliveryExperienceType": {
        "enum": [
          "DeliveryConfirmationWithoutSignature",
          "DeliveryConfirmationWithAdultSignature",
          "DeliveryConfirmationWithSignature",
          "NoTracking"
        ],
        "type": "string"
      },
      "Dimensions": {
        "required": [
          "height",
          "length"
        ],
        "type": "object",
        "properties": {
          "width": {
            "uniqueItems": false,
            "type": "number",
            "description": "Width in meters",
            "format": "decimal",
            "nullable": true,
            "example": 0
          },
          "length": {
            "uniqueItems": false,
            "type": "number",
            "description": "Length in meters",
            "format": "decimal",
            "example": 0
          },
          "height": {
            "uniqueItems": false,
            "type": "number",
            "description": "Height in meters",
            "format": "decimal",
            "example": 0
          }
        },
        "description": "Dimensions of a product",
        "nullable": true
      },
      "DocumentType": {
        "enum": [
          "Invoice",
          "DeliveryNote",
          "ShippingLabel",
          "Custom"
        ],
        "type": "string"
      },
      "ErrorCode": {
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "minLength": 1,
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "ErrorMessages": {
        "type": "object",
        "properties": {
          "message": {
            "uniqueItems": false,
            "type": "string",
            "readOnly": true,
            "example": "An error occured"
          }
        },
        "nullable": true
      },
      "ErrorResponse": {
        "required": [
          "errorCode",
          "errorMessages",
          "errorMetaData"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "errorMessages": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessages"
            },
            "readOnly": true
          },
          "errorMetaData": {
            "uniqueItems": false,
            "readOnly": true
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Returns.Models.ChangedLockStatus": {
        "type": "object",
        "properties": {
          "lockedByUserId": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "lockedAt": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedDateTimeOffset"
          },
          "lockedUntil": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedDateTimeOffset"
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Returns.Models.ChangedReturn": {
        "type": "object",
        "properties": {
          "returnId": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "merchantId": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "warehouseId": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "merchantReturnNumber": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "fulfillerReturnNumber": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "contact": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "internalNote": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "externalNote": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "customerAddress": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedAddress"
          },
          "state": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedReturnType"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Returns.Models.ReturnItemChange"
            }
          },
          "writeLock": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Returns.Models.ChangedLockStatus"
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Returns.Models.ChangedReturnItem": {
        "type": "object",
        "properties": {
          "returnItemId": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "jfsku": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "merchantSku": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "name": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "outboundId": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "outboundItemId": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "quantity": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedDecimal"
          },
          "reason": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedReturnReasonType"
          },
          "reasonNote": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "conditionNote": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "state": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedReturnType"
          },
          "condition": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedConditionType"
          },
          "stockChanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Returns.Models.ReturnItemStockChangeChange"
            }
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Returns.Models.ChangedReturnItemStockChange": {
        "type": "object",
        "properties": {
          "stockChangeId": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Stocks.Models.ChangedStockChangeId"
          },
          "merchantSku": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "quantity": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedDecimal"
          },
          "quantityBlocked": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedDecimal"
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Returns.Models.ReturnChange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated at datetime",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "modificationState": {
            "$ref": "#/components/schemas/ObjectState"
          },
          "modifiedFrom": {
            "type": "string",
            "readOnly": true
          },
          "changes": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Returns.Models.ChangedReturn"
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Returns.Models.ReturnItemChange": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated at datetime",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "modificationState": {
            "$ref": "#/components/schemas/ObjectState"
          },
          "modifiedFrom": {
            "type": "string",
            "readOnly": true
          },
          "changes": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Returns.Models.ChangedReturnItem"
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Returns.Models.ReturnItemStockChangeChange": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/StockChangeId"
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated at datetime",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "modificationState": {
            "$ref": "#/components/schemas/ObjectState"
          },
          "modifiedFrom": {
            "type": "string",
            "readOnly": true
          },
          "changes": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Returns.Models.ChangedReturnItemStockChange"
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedAddress": {
        "type": "object",
        "properties": {
          "salutation": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "firstname": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "lastname": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "company": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "street": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "city": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "zip": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "country": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "email": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "phone": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "extraLine": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "extraAddressLine": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "state": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "mobile": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "fax": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          }
        },
        "description": "A postal address (One of company or lastname must be given)",
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedConditionType": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ConditionType"
          },
          "previousValue": {
            "$ref": "#/components/schemas/ConditionType"
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedDateTimeOffset": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "previousValue": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedDecimal": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "readOnly": true
          },
          "previousValue": {
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "readOnly": true
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedInt": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "previousValue": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedReturnReasonType": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ReturnReasonType"
          },
          "previousValue": {
            "$ref": "#/components/schemas/ReturnReasonType"
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedReturnType": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/ReturnType"
          },
          "previousValue": {
            "$ref": "#/components/schemas/ReturnType"
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "previousValue": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "nullable": true
      },
      "Ffn.Server.Api.v1.Fulfiller.Stocks.Models.ChangedStockChangeId": {
        "type": "object",
        "properties": {
          "warehouseId": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "jfsku": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedString"
          },
          "stockVersion": {
            "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Shared.Models.ChangedInt"
          }
        },
        "description": "Stock change identifier",
        "nullable": true
      },
      "FreightOptionType": {
        "enum": [
          "Parcel",
          "LessThanTruckload",
          "FullTruckload",
          "Other"
        ],
        "type": "string"
      },
      "Identifier": {
        "type": "object",
        "properties": {
          "mpn": {
            "$ref": "#/components/schemas/Mpn"
          },
          "ean": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "European Article Number",
            "nullable": true,
            "example": "8896982295860"
          },
          "isbn": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "International Standard Book Number",
            "nullable": true,
            "example": "978-3-86680-192-9"
          },
          "upc": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Universal Product Code",
            "nullable": true,
            "example": "889698229586"
          },
          "asin": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Amazon Standard Identification Number",
            "nullable": true,
            "example": "B071GVGFQF"
          }
        },
        "description": "Product identifer container"
      },
      "IdentifierType": {
        "enum": [
          "TrackingId",
          "AmazonShipmentId",
          "Other"
        ],
        "type": "string"
      },
      "Inbound": {
        "required": [
          "attributes",
          "inboundId",
          "items",
          "merchantId",
          "merchantInboundNumber",
          "modificationInfo",
          "status",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "inboundId": {
            "maxLength": 255,
            "minLength": 7,
            "uniqueItems": false,
            "type": "string",
            "description": "Inbound identifier",
            "example": "MERC03INBND01"
          },
          "merchantId": {
            "maxLength": 4,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant identifier",
            "example": "MERC"
          },
          "items": {
            "minLength": 1,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InboundItem"
            },
            "description": "One or more items that shall arrive at your warehouse"
          },
          "status": {
            "$ref": "#/components/schemas/InboundStatus"
          },
          "merchantInboundNumber": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^.*$",
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant inbound number",
            "example": "My_Identifier001"
          },
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the inbound",
            "nullable": true,
            "example": "This is a custom note."
          },
          "purchaseOrderNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "purchase order number",
            "nullable": true,
            "example": "PO-123-AB"
          },
          "externalInboundNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "External inbound number",
            "nullable": true,
            "example": "AB12345XY"
          },
          "attributes": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            },
            "description": "Attributes of the inbound. Attributes are flexible custom fields"
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "supplier": {
            "$ref": "#/components/schemas/InboundSupplier"
          }
        },
        "description": "An inbound is a declaration of your merchant that specific items will arrive at your warehouse",
        "nullable": true
      },
      "InboundItem": {
        "required": [
          "inboundItemId",
          "jfsku",
          "quantity",
          "quantityOpen"
        ],
        "type": "object",
        "properties": {
          "inboundItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Inbound item identifier",
            "example": "1"
          },
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of the inbound item in that inbound",
            "format": "decimal",
            "example": 203.202
          },
          "quantityOpen": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of that inbound item which has not arrived at the fulfiller's warehouse yet",
            "format": "decimal",
            "example": 203.202
          },
          "supplierSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The SKU (stock keeping unit) of the supplier for that inbound item",
            "nullable": true,
            "example": "string"
          },
          "supplierProductName": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The product name of the supplier for that inbound item",
            "nullable": true,
            "example": "string"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the inbound",
            "nullable": true,
            "example": "This is a custom note."
          }
        },
        "description": "A specific item that shall arrive at your warehouse",
        "nullable": true
      },
      "InboundShippingNotification": {
        "required": [
          "inboundId",
          "inboundShippingNotificationId",
          "items",
          "merchantId",
          "merchantInboundNumber",
          "merchantShippingNotificationNumber",
          "modificationInfo",
          "packages"
        ],
        "type": "object",
        "properties": {
          "inboundShippingNotificationId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Id of this inbound shipping notification",
            "example": "MERC07XY"
          },
          "inboundId": {
            "maxLength": 255,
            "minLength": 7,
            "uniqueItems": false,
            "type": "string",
            "description": "Inbound identifier",
            "example": "MERC03INBND01"
          },
          "merchantInboundNumber": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^.*$",
            "uniqueItems": false,
            "type": "string",
            "example": "My_Identifier001"
          },
          "merchantId": {
            "maxLength": 4,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant identifier",
            "example": "MERC"
          },
          "items": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InboundShippingNotificationItem"
            },
            "description": "Products included in that inbound shipping notification"
          },
          "packages": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InboundShippingPackage"
            },
            "description": "Information about packages in the shipping notification"
          },
          "merchantShippingNotificationNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant shipping notification number",
            "example": "MSNN001"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the inbound",
            "nullable": true,
            "example": "This is a custom note."
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        },
        "description": "Shipping notification for an inbound that has been shipped",
        "nullable": true
      },
      "InboundShippingNotificationItem": {
        "required": [
          "inboundShippingNotificationItemId",
          "jfsku",
          "quantity",
          "serialnumbers"
        ],
        "type": "object",
        "properties": {
          "inboundShippingNotificationItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Inbound item identifier",
            "example": "1"
          },
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of that inbound item",
            "format": "decimal",
            "example": 203.202
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the inbound",
            "nullable": true,
            "example": "This is a custom note."
          },
          "packageId": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Specifies the package that contains the item. The id is the position of the package within the corresponding array",
            "format": "int32",
            "nullable": true,
            "example": 0
          },
          "bestBefore": {
            "$ref": "#/components/schemas/BestBefore"
          },
          "batch": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Batch of the item within the inbound shipping notification",
            "nullable": true,
            "example": "Elor"
          },
          "serialnumbers": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "description": "Serial numbers of the item within the inbound shipping notification",
            "example": [
              "SN-21323",
              "SN-254312",
              "SN-42344"
            ]
          }
        },
        "description": "A product within a inbound shipping notification",
        "nullable": true
      },
      "InboundShippingPackage": {
        "required": [
          "freightOption",
          "identifier",
          "shippingDate"
        ],
        "type": "object",
        "properties": {
          "estimatedDeliveryDate": {
            "uniqueItems": false,
            "type": "string",
            "description": "Estimated delivery date for that package",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "freightOption": {
            "$ref": "#/components/schemas/FreightOptionType"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of that package",
            "nullable": true,
            "example": "This is a custom note."
          },
          "trackingUrl": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Tracking URL for that package",
            "nullable": true,
            "example": "http://nolp.dhl.de/nextt-online-public/set_identcodes.do?lang=de&idc=TR123456789"
          },
          "carrierCode": {
            "uniqueItems": false,
            "type": "string",
            "description": "Carrier Code for that package",
            "nullable": true,
            "example": "DHL service"
          },
          "carrierName": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Carrier Name for that package",
            "nullable": true,
            "example": "DHL"
          },
          "identifier": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageIdentifier"
            },
            "description": "Package identifier container"
          },
          "shipmentCount": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Number of parcels / containers / etc. in that package",
            "format": "int32",
            "nullable": true,
            "example": 0
          },
          "shippingDate": {
            "uniqueItems": false,
            "type": "string",
            "description": "Shipping date of the package",
            "format": "date-time",
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "dimensions": {
            "$ref": "#/components/schemas/InboundShippingPackageDimensions"
          },
          "weight": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 0
          }
        },
        "description": "A package within an inbound shipping notification. It describes how the inbound will arrive at the fulfiller's warehouse",
        "nullable": true
      },
      "InboundShippingPackageDimensions": {
        "required": [
          "height",
          "length",
          "width"
        ],
        "type": "object",
        "properties": {
          "width": {
            "uniqueItems": false,
            "type": "number",
            "description": "Width",
            "format": "decimal",
            "example": 0
          },
          "length": {
            "uniqueItems": false,
            "type": "number",
            "description": "Length",
            "format": "decimal",
            "example": 0
          },
          "height": {
            "uniqueItems": false,
            "type": "number",
            "description": "Height",
            "format": "decimal",
            "example": 0
          }
        },
        "description": "Dimensions of a product",
        "nullable": true
      },
      "InboundStatus": {
        "enum": [
          "Preparation",
          "Pending",
          "PartiallyReceipted",
          "Receipted",
          "Closed"
        ],
        "type": "string"
      },
      "InboundSupplier": {
        "required": [
          "merchantSupplierNumber"
        ],
        "type": "object",
        "properties": {
          "merchantSupplierName": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "merchant supplier name",
            "nullable": true,
            "example": "MyName"
          },
          "merchantSupplierNumber": {
            "maxLength": 255,
            "minLength": 0,
            "pattern": "^.*$",
            "uniqueItems": false,
            "type": "string",
            "description": "merchant supplier number",
            "example": "My_Identifier001"
          }
        },
        "description": "Supplier of the inbound",
        "nullable": true
      },
      "ItemType": {
        "enum": [
          "Product",
          "Shipping",
          "Other",
          "BillOfMaterials"
        ],
        "type": "string"
      },
      "KindOfRelationType": {
        "enum": [
          "BillOfMaterials",
          "Condition"
        ],
        "type": "string"
      },
      "LockStatus": {
        "type": "object",
        "properties": {
          "lockedByUserId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "string"
          },
          "lockedAt": {
            "uniqueItems": false,
            "type": "string",
            "description": "Created at datetime",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "lockedUntil": {
            "uniqueItems": false,
            "type": "string",
            "description": "Created at datetime",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "nullable": true
      },
      "Merchant": {
        "required": [
          "address",
          "isActive",
          "modificationInfo",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "maxLength": 4,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "User identifier",
            "example": "MERC"
          },
          "isActive": {
            "uniqueItems": false,
            "type": "boolean",
            "example": false
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        },
        "description": "The merchant is the user who wants to use fulfillment services",
        "nullable": true
      },
      "ModificationInfo": {
        "required": [
          "createdAt"
        ],
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Created at datetime",
            "format": "date-time",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last updated at datetime",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "state": {
            "$ref": "#/components/schemas/ObjectState"
          },
          "changesInRange": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModificationInfo"
            }
          }
        },
        "nullable": true
      },
      "Mpn": {
        "required": [
          "manufacturer",
          "partNumber"
        ],
        "type": "object",
        "properties": {
          "manufacturer": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the manufacturer",
            "example": "Rick Sanchez"
          },
          "partNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Manufacturer part number",
            "example": "IG-021"
          }
        },
        "description": "Manufacturer part number container",
        "nullable": true
      },
      "ObjectState": {
        "enum": [
          "New",
          "Modified",
          "Deleted"
        ],
        "type": "string"
      },
      "Outbound": {
        "required": [
          "attachments",
          "attributes",
          "currency",
          "items",
          "merchantId",
          "merchantOutboundNumber",
          "modificationInfo",
          "outboundId",
          "priority",
          "relatedReturns",
          "shippingAddress",
          "status",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "outboundId": {
            "maxLength": 255,
            "minLength": 7,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound identifier",
            "example": "MERC02AXEV"
          },
          "merchantId": {
            "maxLength": 4,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant identifier",
            "example": "MERC"
          },
          "externalNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "External outbound number",
            "nullable": true,
            "example": "EX1234-001"
          },
          "status": {
            "$ref": "#/components/schemas/OutboundStatusType"
          },
          "priority": {
            "maximum": 5,
            "minimum": -5,
            "uniqueItems": false,
            "type": "integer",
            "description": "Priority of the outbound",
            "format": "int32",
            "example": 3
          },
          "merchantOutboundNumber": {
            "maxLength": 255,
            "minLength": 1,
            "pattern": "^.*$",
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant order number",
            "example": "My_Identifier001"
          },
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "uniqueItems": false,
            "type": "string",
            "description": "Currency",
            "format": "ISO 4217 alpha",
            "example": "EUR"
          },
          "internalNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Internal note of the outbound. This note is for the fulfiller only",
            "nullable": true,
            "example": "This is a custom note."
          },
          "externalNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "External note of the outbound. This note can be shown to the customer who will receive the shipment",
            "nullable": true,
            "example": "This is a custom note."
          },
          "premiumType": {
            "$ref": "#/components/schemas/PremiumType"
          },
          "salesChannel": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Sales channel",
            "nullable": true,
            "example": "Onlineshop"
          },
          "attributes": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            },
            "description": "Attributes of the outbound. Attributes are flexible custom fields"
          },
          "desiredDeliveryDate": {
            "uniqueItems": false,
            "type": "string",
            "description": "Desired delivery date",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "shippingMethodId": {
            "maxLength": 255,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Shipping method identifier. You can either specify a shiiping method id or a shipping type in an outbound",
            "nullable": true,
            "example": "FULF0A0001"
          },
          "shippingType": {
            "$ref": "#/components/schemas/ShippingType"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "senderAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "cancelReasonCode": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "DeliveryAdressUnknown"
          },
          "cancelReason": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "An cancellation reason in case this outbound is cancelled",
            "nullable": true,
            "example": "Unknown Address"
          },
          "shippingFee": {
            "uniqueItems": false,
            "type": "number",
            "description": "Shipping fee of the outbound",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "orderValue": {
            "uniqueItems": false,
            "type": "number",
            "description": "Order value of the outbound",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "items": {
            "minLength": 1,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutboundItem"
            },
            "description": "Items included in the outbound"
          },
          "attachments": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutboundAttachment"
            },
            "description": "Attachments for the outbounds. For example an invoice in PDF format"
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "statusTimestamp": {
            "$ref": "#/components/schemas/StatusTimestamp"
          }
        },
        "description": "An order that has to be shipped from your warehouse",
        "nullable": true
      },
      "OutboundAttachment": {
        "required": [
          "documentType",
          "merchantDocumentId",
          "mimeType",
          "size",
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "uniqueItems": false,
            "type": "string",
            "description": "URL of that attachment",
            "format": "uri",
            "example": "string"
          },
          "size": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Size of the attachment",
            "format": "int64",
            "example": 0
          },
          "mimeType": {
            "uniqueItems": false,
            "type": "string",
            "description": "Mime Type of that attachment",
            "example": "application/pdf"
          },
          "merchantDocumentId": {
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant document identifier",
            "example": "Rechnung RE19700101"
          },
          "documentType": {
            "$ref": "#/components/schemas/DocumentType"
          },
          "expiredAt": {
            "uniqueItems": false,
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "description": "An attachment of an outbound. It may be an invoice in PDF format",
        "nullable": true
      },
      "OutboundAttachmentData": {
        "required": [
          "data",
          "documentType",
          "merchantDocumentId",
          "mimeType",
          "size"
        ],
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": false,
            "type": "string",
            "description": "Byte array",
            "format": "byte"
          },
          "size": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Size of the attachment",
            "format": "int64",
            "example": 0
          },
          "mimeType": {
            "uniqueItems": false,
            "type": "string",
            "description": "Mime Type of that attachment",
            "example": "application/pdf"
          },
          "merchantDocumentId": {
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant document identifier",
            "example": "Rechnung RE19700101"
          },
          "documentType": {
            "$ref": "#/components/schemas/DocumentType"
          }
        },
        "description": "An outbound file, for example the invoice PDF",
        "nullable": true
      },
      "OutboundItem": {
        "required": [
          "itemType",
          "outboundItemId",
          "quantity",
          "quantityOpen"
        ],
        "type": "object",
        "properties": {
          "outboundItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound item identifier",
            "example": "5"
          },
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "nullable": true,
            "example": "MERC01PRDCT"
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of that outbound item. This quantity of that item shall be shipped to the customer",
            "format": "decimal",
            "example": 203.202
          },
          "quantityOpen": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of the outbound item which is not shipped yet",
            "format": "decimal",
            "example": 203.202
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the outbound item",
            "nullable": true,
            "example": "Interdimensional Goggles"
          },
          "merchantSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The SKU (stock keeping unit) of the merchant for that outbound item",
            "nullable": true,
            "example": "ART2394871"
          },
          "externalNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "External number for that outbound item",
            "nullable": true,
            "example": "EX1234-001"
          },
          "price": {
            "uniqueItems": false,
            "type": "number",
            "description": "Price of that outbound item. Is used for insurance and / or customs duty issues",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "vat": {
            "uniqueItems": false,
            "type": "number",
            "description": "VAT of that outbound item",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "billOfMaterialsId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Id of the bill of materials product. Has to be filled if this item is a component of a bill of materials",
            "nullable": true,
            "example": "12"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the outbound item",
            "nullable": true,
            "example": "This is a custom note."
          }
        },
        "description": "An item within an outbound",
        "nullable": true
      },
      "OutboundShippingLabel": {
        "required": [
          "data",
          "mimeType",
          "shippingLabelId",
          "size"
        ],
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": false,
            "type": "string",
            "description": "Data of the shipping label",
            "format": "byte"
          },
          "shippingLabelId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Unique id of the shipping label",
            "example": "SHPL-0815"
          },
          "size": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Size of the attachment",
            "format": "int32",
            "example": 14385
          },
          "mimeType": {
            "uniqueItems": false,
            "type": "string",
            "description": "Mime Type of that attachment",
            "example": "application/pdf"
          },
          "trackingId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Tracking id of the shipping label",
            "nullable": true,
            "example": "TR123456789"
          }
        },
        "nullable": true
      },
      "OutboundShippingNotification": {
        "required": [
          "fulfillerShippingNotificationNumber",
          "items",
          "merchantId",
          "modificationInfo",
          "outboundId",
          "outboundShippingNotificationId",
          "outboundStatus",
          "packages"
        ],
        "type": "object",
        "properties": {
          "outboundId": {
            "maxLength": 255,
            "minLength": 7,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound identifier",
            "example": "MERC02AXEV"
          },
          "merchantId": {
            "maxLength": 4,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant identifier",
            "example": "MERC"
          },
          "fulfillerShippingNotificationNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound shipping notification identifier",
            "example": "SH-123-002"
          },
          "outboundShippingNotificationId": {
            "maxLength": 255,
            "minLength": 7,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound shipping notification identifier",
            "example": "MERC06OUTBNDSHPNTFCN01"
          },
          "items": {
            "minLength": 1,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutboundShippingNotificationItem"
            },
            "description": "Items within the outbound shipping notification"
          },
          "packages": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutboundShippingPackage"
            },
            "description": "Packages within the outbound shipping notification"
          },
          "outboundStatus": {
            "$ref": "#/components/schemas/OutboundStatusType"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of an outbound shipping notification",
            "nullable": true,
            "example": "This is a custom note."
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        },
        "description": "Shipping notification for an outbound provided by you",
        "nullable": true
      },
      "OutboundShippingNotificationItem": {
        "required": [
          "outboundShippingNotificationItemId",
          "quantity",
          "serialnumbers"
        ],
        "type": "object",
        "properties": {
          "outboundShippingNotificationItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound shipping notification item identifier",
            "example": "3"
          },
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "nullable": true,
            "example": "MERC01PRDCT"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of the item which has been shipped within that outbound shipping notification",
            "format": "decimal",
            "example": 203.202
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the outbound shipping notification",
            "nullable": true,
            "example": "This is a custom note."
          },
          "bestBefore": {
            "$ref": "#/components/schemas/BestBefore"
          },
          "batch": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Batch of the item within the outbound shipping notification",
            "nullable": true,
            "example": "Elor"
          },
          "serialnumbers": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "type": "string",
              "nullable": true
            },
            "description": "Serial numbers of the item within the outbound shipping notification",
            "example": [
              "SN-21323",
              "SN-254312",
              "SN-42344"
            ]
          }
        },
        "description": "An item of an outbound that has been shipped within the shipping notification",
        "nullable": true
      },
      "OutboundShippingPackage": {
        "required": [
          "freightOption",
          "identifier",
          "shippingDate",
          "shippingMethodId"
        ],
        "type": "object",
        "properties": {
          "freightOption": {
            "$ref": "#/components/schemas/FreightOptionType"
          },
          "estimatedDeliveryDate": {
            "uniqueItems": false,
            "type": "string",
            "description": "Estimated delivery date for that package",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of that package",
            "nullable": true,
            "example": "This is a custom note."
          },
          "trackingUrl": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Tracking URL for that package",
            "nullable": true,
            "example": "http://nolp.dhl.de/nextt-online-public/set_identcodes.do?lang=de&idc=TR123456789"
          },
          "identifier": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageIdentifier"
            },
            "description": "Package identifier container"
          },
          "shippingDate": {
            "uniqueItems": false,
            "type": "string",
            "description": "Shipping date of the package",
            "format": "date-time",
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "shippingMethodId": {
            "maxLength": 255,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Shipping method identifier",
            "example": "FULF0A0001"
          },
          "dimensions": {
            "$ref": "#/components/schemas/OutboundShippingPackageDimensions"
          },
          "weight": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 5.5
          }
        },
        "description": "A package within an outbound shipping notification. It describes how the outbound will arrive at the customer",
        "nullable": true
      },
      "OutboundShippingPackageDimensions": {
        "required": [
          "height",
          "length",
          "width"
        ],
        "type": "object",
        "properties": {
          "width": {
            "uniqueItems": false,
            "type": "number",
            "description": "Width",
            "format": "decimal",
            "example": 0
          },
          "length": {
            "uniqueItems": false,
            "type": "number",
            "description": "Length",
            "format": "decimal",
            "example": 0
          },
          "height": {
            "uniqueItems": false,
            "type": "number",
            "description": "Height",
            "format": "decimal",
            "example": 0
          }
        },
        "description": "Dimensions of a product",
        "nullable": true
      },
      "OutboundStatusType": {
        "enum": [
          "Preparation",
          "Pending",
          "Acknowledged",
          "Pickprocess",
          "Locked",
          "PartiallyShipped",
          "Shipped",
          "PartiallyCanceled",
          "Canceled"
        ],
        "type": "string"
      },
      "PackageIdentifier": {
        "required": [
          "identifierType",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The value of the package identifier",
            "example": "TR123456789"
          },
          "identifierType": {
            "$ref": "#/components/schemas/IdentifierType"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the identifier",
            "nullable": true,
            "example": "string"
          }
        },
        "description": "A package can have several identifiers at the same type. The package identifier helps the fulfiller to identify an (partial) inbound arrival at his warehouse",
        "nullable": true
      },
      "Page": {
        "required": [
          "limit",
          "offset",
          "total"
        ],
        "type": "object",
        "properties": {
          "total": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Total pages in the response",
            "format": "int64",
            "example": 0
          },
          "limit": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Number of items in a response page",
            "format": "int32",
            "example": 50
          },
          "offset": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Offset of a page",
            "format": "int32",
            "example": 50
          }
        },
        "description": "A page of an paged response"
      },
      "PageLinks": {
        "type": "object",
        "properties": {
          "previous": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=0"
          },
          "next": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          }
        },
        "nullable": true
      },
      "PagedAuthorizationResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authorization"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Paged authorization response",
        "nullable": true
      },
      "PagedInboundResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Inbound"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Paged inbound response",
        "nullable": true
      },
      "PagedMerchantResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Merchant"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "nullable": true
      },
      "PagedOutboundResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Outbound"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Paged outbounds",
        "nullable": true
      },
      "PagedProductResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPageItem"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Pages product response",
        "nullable": true
      },
      "PagedReturnResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Return"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Paged return response",
        "nullable": true
      },
      "PagedShippingMethodResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingMethod"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Paged shiiping method response",
        "nullable": true
      },
      "PagedStockChangeResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockChange"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Paged stock change response",
        "nullable": true
      },
      "PagedStockChangeWithProductResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockChangeWithProduct"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Paged stock change response",
        "nullable": true
      },
      "PagedStockInWarehouseResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockInWarehouse"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Pages stock in warehouse information",
        "nullable": true
      },
      "PagedStockResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stock"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Paged stock information",
        "nullable": true
      },
      "PagedWarehouseResponse": {
        "required": [
          "_page",
          "count"
        ],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Warehouse"
            }
          },
          "_page": {
            "$ref": "#/components/schemas/Page"
          },
          "_links": {
            "$ref": "#/components/schemas/PageLinks"
          },
          "nextPageLink": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "?$orderBy=modificationInfo/createdAt&$top=50&$skip=100"
          },
          "count": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "example": 0
          }
        },
        "description": "Pages warehouse response",
        "nullable": true
      },
      "Picture": {
        "required": [
          "mimeType",
          "number",
          "publicUrl",
          "size",
          "url"
        ],
        "type": "object",
        "properties": {
          "number": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Picture number",
            "format": "int32",
            "example": 1
          },
          "url": {
            "uniqueItems": false,
            "type": "string",
            "description": "URL of that picture",
            "format": "uri",
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/products/MERC01PRDCT/pictures/1"
          },
          "publicUrl": {
            "uniqueItems": false,
            "type": "string",
            "description": "URL of that picture",
            "format": "uri",
            "example": "https://ffn2.api.jtl-software.com/api/pictures/19ce8857-bcbd-43d6-99c2-a1387a181d27"
          },
          "hash": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Hash of that picture",
            "nullable": true,
            "example": "string"
          },
          "size": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Size of the picture",
            "format": "int64",
            "example": 0
          },
          "mimeType": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "example": "image/jpeg"
          }
        },
        "description": "Picture of a product",
        "nullable": true
      },
      "PictureData": {
        "required": [
          "data",
          "mimeType",
          "number",
          "size"
        ],
        "type": "object",
        "properties": {
          "data": {
            "uniqueItems": false,
            "type": "string",
            "description": "Byte array",
            "format": "byte"
          },
          "hash": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Hash of that picture",
            "nullable": true,
            "example": "string"
          },
          "size": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Size of the picture",
            "format": "int64",
            "example": 0
          },
          "mimeType": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "example": "image/jpeg"
          },
          "number": {
            "uniqueItems": false,
            "type": "integer",
            "description": "Picture number",
            "format": "int32",
            "example": 30220
          }
        },
        "description": "Product picture data",
        "nullable": true
      },
      "PremiumType": {
        "enum": [
          "EbayPlus",
          "AmazonSellerFulfilledPrime"
        ],
        "type": "string",
        "nullable": true
      },
      "Price": {
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "uniqueItems": false,
            "type": "number",
            "description": "Price amount",
            "format": "decimal",
            "example": 14535.45
          },
          "currency": {
            "maxLength": 3,
            "minLength": 3,
            "uniqueItems": false,
            "type": "string",
            "description": "Currency",
            "format": "ISO 4217 alpha",
            "example": "EUR"
          }
        },
        "description": "Price of the product",
        "nullable": true
      },
      "Product": {
        "required": [
          "attributes",
          "bundles",
          "identifier",
          "jfsku",
          "merchantId",
          "merchantSku",
          "modificationInfo",
          "name",
          "openInbounds",
          "openOutbounds",
          "pictures",
          "relatedProducts"
        ],
        "type": "object",
        "properties": {
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "merchantId": {
            "maxLength": 4,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant identifier",
            "example": "MERC"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the product",
            "example": "Interdimensional Goggles"
          },
          "merchantSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "SKU (Stock Keeping Unit) of the merchant",
            "example": "ART2394871"
          },
          "pictures": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Picture"
            },
            "description": "Pictures of the product"
          },
          "productGroup": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Group of the product",
            "nullable": true,
            "example": "Headwear"
          },
          "originCountry": {
            "maxLength": 2,
            "minLength": 2,
            "uniqueItems": false,
            "type": "string",
            "description": "Country of origin",
            "format": "ISO 3166 alpha-2",
            "nullable": true,
            "example": "DE"
          },
          "manufacturer": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of manufacturer",
            "nullable": true,
            "example": "Rick Sanchez"
          },
          "weight": {
            "uniqueItems": false,
            "type": "number",
            "description": "Weight in kg",
            "format": "decimal",
            "nullable": true,
            "example": 0
          },
          "netWeight": {
            "uniqueItems": false,
            "type": "number",
            "description": "Weight of the raw product in kg (does not include the weight of the products packaging or container)",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note",
            "nullable": true,
            "example": "The Interdimensional Goggles are a gadget created by Rick to observe realities across different dimensions by matching it to the wearer's DNA."
          },
          "identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "specifications": {
            "$ref": "#/components/schemas/Specifications"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "attributes": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            },
            "description": "A product can have multiple attributes which represent custom fields"
          },
          "netRetailPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "bundles": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductBundle"
            },
            "description": "Packagings of a quantity products"
          },
          "relatedProducts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedProduct"
            },
            "description": "Packagings of a quantity products"
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionType"
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        },
        "description": "A product from one of your merchants",
        "nullable": true
      },
      "ProductBundle": {
        "required": [
          "name",
          "quantity"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the bundle",
            "example": "Interdimensional Goggles"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of products in the bundle",
            "format": "decimal",
            "example": 203.202
          },
          "ean": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "European Article Number",
            "nullable": true,
            "example": "8896982295860"
          },
          "upc": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Universal Product Code",
            "nullable": true,
            "example": "889698229586"
          }
        },
        "description": "Packaging of a quantity of products",
        "nullable": true
      },
      "ProductPageItem": {
        "required": [
          "attributes",
          "bundles",
          "identifier",
          "merchantSku",
          "modificationInfo",
          "name",
          "openInbounds",
          "openOutbounds",
          "pictures",
          "relatedProducts",
          "specifications"
        ],
        "type": "object",
        "properties": {
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "nullable": true,
            "example": "MERC01PRDCT"
          },
          "merchantId": {
            "maxLength": 4,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Merchant identifier",
            "nullable": true,
            "example": "MERC"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the product",
            "example": "Interdimensional Goggles"
          },
          "merchantSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "SKU (Stock Keeping Unit) of the merchant",
            "example": "ART2394871"
          },
          "pictures": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Picture"
            },
            "description": "Pictures of the product"
          },
          "productGroup": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Group of the product",
            "nullable": true,
            "example": "Headwear"
          },
          "originCountry": {
            "maxLength": 2,
            "minLength": 2,
            "uniqueItems": false,
            "type": "string",
            "description": "Country of origin",
            "format": "ISO 3166 alpha-2",
            "nullable": true,
            "example": "DE"
          },
          "manufacturer": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of manufacturer",
            "nullable": true,
            "example": "Rick Sanchez"
          },
          "weight": {
            "uniqueItems": false,
            "type": "number",
            "description": "Weight in kg",
            "format": "decimal",
            "nullable": true,
            "example": 0
          },
          "netWeight": {
            "uniqueItems": false,
            "type": "number",
            "description": "Weight of the raw product in kg (does not include the weight of the products packaging or container)",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note",
            "nullable": true,
            "example": "The Interdimensional Goggles are a gadget created by Rick to observe realities across different dimensions by matching it to the wearer's DNA."
          },
          "identifier": {
            "$ref": "#/components/schemas/Identifier"
          },
          "specifications": {
            "$ref": "#/components/schemas/Specifications"
          },
          "dimensions": {
            "$ref": "#/components/schemas/Dimensions"
          },
          "attributes": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            },
            "description": "A product can have multiple attributes which represent custom fields"
          },
          "netRetailPrice": {
            "$ref": "#/components/schemas/Price"
          },
          "bundles": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductBundle"
            },
            "description": "Packagings of a quantity products"
          },
          "relatedProducts": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedProduct"
            },
            "description": "Packagings of a quantity products"
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionType"
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        },
        "description": "A product which can be used in inbounds and outbounds. Products have to be created by you.",
        "nullable": true
      },
      "RecentAuthorizationList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/authorizations/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Authorization"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "description": "Object including the merchant authorization and the merchant's warehouse authorizations",
        "nullable": true
      },
      "RecentInboundList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/inbounds/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Inbound"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "description": "An inbound is a declaration of your merchant that specific items will arrive at your warehouse",
        "nullable": true
      },
      "RecentInboundShippingNotificationList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/inbounds/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InboundShippingNotification"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "description": "Shipping notification for an inbound that has been shipped",
        "nullable": true
      },
      "RecentMerchantList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/merchants/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Merchant"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "description": "The merchant is the user who wants to use fulfillment services",
        "nullable": true
      },
      "RecentOutboundList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/outbounds/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Outbound"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "description": "An order that has to be shipped from your warehouse",
        "nullable": true
      },
      "RecentProductList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/products/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "description": "A product from one of your merchants",
        "nullable": true
      },
      "RecentReturnChangeList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/returns/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ffn.Server.Api.v1.Fulfiller.Returns.Models.ReturnChange"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "nullable": true
      },
      "RecentReturnList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/returns/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Return"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "nullable": true
      },
      "RecentShippingMethodList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/shippingMethods/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingMethod"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "description": "A shipping method that can be used in outbounds by your merchants",
        "nullable": true
      },
      "RecentStockChangeList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/stocks/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockChange"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "description": "A change of the stock of a product",
        "nullable": true
      },
      "RecentWarehouseList": {
        "required": [
          "data",
          "from",
          "moreDataAvailable",
          "to"
        ],
        "type": "object",
        "properties": {
          "nextChunkUrl": {
            "uniqueItems": false,
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "example": "https://ffn2.api.jtl-software.com/api/v1/fulfiller/warehouses/updates?fromDate=2020-02-11T16%3a05%3a06.834%2b00%3a00&toDate=2020-02-11T16%3a07%3a22.385%2b00%3a00&page=2&ignoreOwnApplicationId=false&ignoreOwnUserId=false"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Warehouse"
            },
            "readOnly": true
          },
          "moreDataAvailable": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "description": "A warehouse where your want to store products of your merchants",
        "nullable": true
      },
      "RelatedProduct": {
        "required": [
          "condition"
        ],
        "type": "object",
        "properties": {
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "nullable": true,
            "example": "MERC01PRDCT"
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionType"
          },
          "kindOfRelation": {
            "$ref": "#/components/schemas/KindOfRelationType"
          }
        },
        "nullable": true
      },
      "Return": {
        "required": [
          "customerAddress",
          "items",
          "merchantId",
          "returnId",
          "state",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "returnId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "example": "MERC05SFERGF"
          },
          "merchantId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "example": "MERC"
          },
          "warehouseId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse must be from the fulfiller who received the return",
            "example": "FULF04XX-12345-0001"
          },
          "merchantReturnNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "string"
          },
          "fulfillerReturnNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "string"
          },
          "contact": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "string"
          },
          "internalNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Internal note of the return.",
            "nullable": true,
            "example": "This is a custom note."
          },
          "externalNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "External note of the return.",
            "nullable": true,
            "example": "This is a custom note."
          },
          "customerAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "state": {
            "$ref": "#/components/schemas/ReturnType"
          },
          "items": {
            "minLength": 1,
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnItem"
            }
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "writeLock": {
            "$ref": "#/components/schemas/LockStatus"
          }
        },
        "nullable": true
      },
      "ReturnItem": {
        "required": [
          "condition",
          "jfsku",
          "merchantSku",
          "name",
          "quantity",
          "reason",
          "returnItemId",
          "state",
          "stockChanges"
        ],
        "type": "object",
        "properties": {
          "returnItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The SKU (stock keeping unit) of the merchant for that outbound item",
            "example": "MERC05PosFDSE"
          },
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "merchantSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The SKU (stock keeping unit) of the merchant for that return item",
            "example": "ART2394871"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Product name",
            "example": "Interdimensional Goggles"
          },
          "outboundId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound Identifier",
            "nullable": true,
            "example": "MERC02AXEV"
          },
          "outboundItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound item identifier",
            "nullable": true,
            "example": "5"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of that return item. This quantity of that item shall be shipped to the customer",
            "format": "decimal",
            "example": 203.202
          },
          "reason": {
            "$ref": "#/components/schemas/ReturnReasonType"
          },
          "reasonNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Internal note of the outbound. This note is for the fulfiller only",
            "nullable": true,
            "example": "This is a custom note."
          },
          "conditionNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Internal note of the outbound. This note is for the fulfiller only",
            "nullable": true,
            "example": "This is a custom note."
          },
          "state": {
            "$ref": "#/components/schemas/ReturnType"
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionType"
          },
          "stockChanges": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnItemStockChange"
            }
          }
        },
        "nullable": true
      },
      "ReturnItemStockChange": {
        "required": [
          "merchantSku",
          "quantity",
          "quantityBlocked",
          "stockChangeId"
        ],
        "type": "object",
        "properties": {
          "stockChangeId": {
            "$ref": "#/components/schemas/StockChangeId"
          },
          "merchantSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The SKU (stock keeping unit) of the merchant for that outbound item",
            "example": "ART2394871"
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "example": 203.202
          },
          "quantityBlocked": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "example": 203.202
          }
        },
        "nullable": true
      },
      "ReturnReasonType": {
        "enum": [
          "NoReason",
          "OrderedByMistake",
          "FoundCheaperPrice",
          "InsufficientPerformanceOrQuality",
          "IncompatibleOrNotAppropriateForIntendedUse",
          "ShippingPackagingIntactItemDamaged",
          "ArrivedTooLate",
          "PartsAccessoriesMissing",
          "ShippingPackageAndItemDamaged",
          "WrongItemSent",
          "DefectiveDoesNotWorkPerfectly",
          "ExcessDelivery",
          "DoNotLikeAnymore",
          "UnauthorisedPurchase",
          "DoesNotMatchDescriptionOnWebsite",
          "RecipientCouldNotBeDetermined",
          "PickUpTimeExpired"
        ],
        "type": "string"
      },
      "ReturnType": {
        "enum": [
          "Announced",
          "Arrived",
          "Completed"
        ],
        "type": "string"
      },
      "ShippingMethod": {
        "required": [
          "fulfillerShippingMethodNumber",
          "modificationInfo",
          "name",
          "shippingMethodId",
          "shippingType"
        ],
        "type": "object",
        "properties": {
          "shippingMethodId": {
            "maxLength": 255,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Shipping methos identifier",
            "example": "FULF0A0001"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the shipping method",
            "example": "DHL package"
          },
          "shippingType": {
            "$ref": "#/components/schemas/ShippingType"
          },
          "trackingUrlSchema": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Tracking URL schema for dynamic tracking URL creation",
            "nullable": true,
            "example": "http://nolp.dhl.de/nextt-online-public/set_identcodes.do?lang=de&idc=#TrackingId#"
          },
          "carrierCode": {
            "uniqueItems": false,
            "type": "string",
            "description": "Carrier Code of the shipping method",
            "nullable": true,
            "example": "DHL service"
          },
          "carrierName": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Carrier name of the shipping method",
            "nullable": true,
            "example": "DHL"
          },
          "cutoffTime": {
            "uniqueItems": false,
            "type": "string",
            "description": "Cut off time of the shipping method. The cut off time is the lastest time an outbound can arrive at JTL-Fulfillment network so that the outbound will be shipped and handed over to the carrier",
            "format": "date-span",
            "nullable": true,
            "example": "14:00"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the shipping method",
            "nullable": true,
            "example": "This is a custom note."
          },
          "fulfillerShippingMethodNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "example": "FSM-0001"
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        },
        "description": "A shipping method that can be used in outbounds by your merchants",
        "nullable": true
      },
      "ShippingMethodAuthorizationRequest": {
        "required": [
          "shippingMethodId"
        ],
        "type": "object",
        "properties": {
          "shippingMethodId": {
            "maxLength": 255,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "List of shipping methods you want to provide",
            "example": "FULF0A0001"
          }
        },
        "description": "These shipping methods shall be available",
        "nullable": true
      },
      "ShippingType": {
        "enum": [
          "Standard",
          "Expedited",
          "NextDay",
          "SecondDay",
          "SameDay",
          "ByShippingLabelProvider"
        ],
        "type": "string"
      },
      "Specifications": {
        "required": [
          "billOfMaterialsComponents",
          "isBatch",
          "isBestBefore",
          "isBillOfMaterials",
          "isDivisible",
          "isPackaging",
          "isSerialNumber"
        ],
        "type": "object",
        "properties": {
          "unNumber": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "UN Number of the product",
            "nullable": true,
            "example": "1065"
          },
          "hazardIdentifier": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "hazard identifier of the product",
            "nullable": true,
            "example": "20"
          },
          "taric": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Taric code of the product",
            "nullable": true,
            "example": "61071100"
          },
          "fnsku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Amazon Fulfillment Network Stock Keeping Unit",
            "nullable": true,
            "example": "X000BDI8TF"
          },
          "isBatch": {
            "uniqueItems": false,
            "type": "boolean",
            "description": "Whether the product has a batch",
            "example": false
          },
          "isDivisible": {
            "uniqueItems": false,
            "type": "boolean",
            "description": "Whether the product is divisible",
            "example": false
          },
          "isBestBefore": {
            "uniqueItems": false,
            "type": "boolean",
            "description": "Whether the product has a best before date",
            "example": false
          },
          "isSerialNumber": {
            "uniqueItems": false,
            "type": "boolean",
            "description": "Whether the product has a serial number",
            "example": false
          },
          "isBillOfMaterials": {
            "uniqueItems": false,
            "type": "boolean",
            "description": "Whether the product is a bill of materials",
            "example": false
          },
          "billOfMaterialsComponents": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillOfMaterialsComponent"
            },
            "description": "Components which are included in this bill of materials product"
          },
          "isPackaging": {
            "uniqueItems": false,
            "type": "boolean",
            "example": false
          }
        },
        "description": "Specifications of a product",
        "nullable": true
      },
      "Statistics": {
        "required": [
          "jfsku",
          "statisticsPerWarehouse"
        ],
        "type": "object",
        "properties": {
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "example": "MERC01PRDCT"
          },
          "incomingGoods": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "outgoingGoods": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "outgoingGoodsLast30": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "outgoingGoodsLast365": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "outgoingGoods30To60": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "averageInventory": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "inventoryTurnover": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "rangesOfCoverage": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "range": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 30220
          },
          "statisticsPerWarehouse": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsPerWarehouse"
            }
          }
        },
        "nullable": true
      },
      "StatisticsPerWarehouse": {
        "type": "object",
        "properties": {
          "warehouseId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "FULF04XX-12345-0001"
          },
          "incomingGoods": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "outgoingGoods": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "outgoingGoodsLast30": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "outgoingGoodsLast365": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "outgoingGoods30To60": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "averageInventory": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "inventoryTurnover": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "rangesOfCoverage": {
            "uniqueItems": false,
            "type": "number",
            "format": "decimal",
            "nullable": true,
            "example": 15.05
          },
          "range": {
            "uniqueItems": false,
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": 30220
          }
        },
        "nullable": true
      },
      "StatusTimestamp": {
        "type": "object",
        "properties": {
          "pending": {
            "uniqueItems": false,
            "type": "string",
            "description": "Timestamp when the outbound has reached the status 'Pending'",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "preparation": {
            "uniqueItems": false,
            "type": "string",
            "description": "Timestamp when the outbound has reached the status 'Preparation'",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "acknowledged": {
            "uniqueItems": false,
            "type": "string",
            "description": "Timestamp when the outbound has reached the status 'Acknowledged'",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "locked": {
            "uniqueItems": false,
            "type": "string",
            "description": "Timestamp when the outbound has reached the status 'Locked'",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "pickprocess": {
            "uniqueItems": false,
            "type": "string",
            "description": "Timestamp when the outbound has reached the status 'Pickprocess'",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "shipped": {
            "uniqueItems": false,
            "type": "string",
            "description": "Timestamp when the outbound has reached the status 'Shipped'",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "partiallyShipped": {
            "uniqueItems": false,
            "type": "string",
            "description": "Timestamp when the outbound has reached the status 'PartiallyShipped'",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "canceled": {
            "uniqueItems": false,
            "type": "string",
            "description": "Timestamp when the outbound has reached the status 'Canceled'",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "partiallyCanceled": {
            "uniqueItems": false,
            "type": "string",
            "description": "Timestamp when the outbound has reached the status 'PartiallyCanceled'",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "nullable": true
      },
      "Stock": {
        "required": [
          "jfsku",
          "merchantSku",
          "stockAnnouncedDetails",
          "stockLevel",
          "stockLevelAnnounced",
          "stockLevelBlocked",
          "stockLevelDetails",
          "stockLevelReserved",
          "stockReservedDetails",
          "warehouses"
        ],
        "type": "object",
        "properties": {
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "stockLevel": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current stock level. This stock level is available for shipment",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelReserved": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current reserved stock level. Stock reservation is caused by outbounds",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current blocked stock level. Blocked stock is caused by the fulfiller",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelAnnounced": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current announced stock level. Announced stock is caused by inbounds",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelDetails": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockLevelDetail"
            },
            "description": "Stock level details itemized by batch and/or best before date"
          },
          "stockReservedDetails": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockReservedDetail"
            },
            "description": "Reserved stock level details"
          },
          "stockAnnouncedDetails": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockAnnouncedDetail"
            },
            "description": "Announced stock level details"
          },
          "warehouses": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockInWarehouse"
            },
            "description": "Stock information distributed over all warehouses this product is located"
          },
          "merchantSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "SKU (Stock Keeping Unit) of the merchant",
            "example": "ART2394871"
          },
          "fulfillerTimestamp": {
            "uniqueItems": false,
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "description": "Stock information of a product",
        "nullable": true
      },
      "StockAnnouncedDetail": {
        "required": [
          "inboundId",
          "inboundItemId",
          "quantityAnnounced"
        ],
        "type": "object",
        "properties": {
          "inboundId": {
            "maxLength": 255,
            "minLength": 7,
            "uniqueItems": false,
            "type": "string",
            "description": "Inbound identifier",
            "example": "MERC03INBND01"
          },
          "inboundItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Inbound item identifier",
            "example": "1"
          },
          "quantityAnnounced": {
            "uniqueItems": false,
            "type": "number",
            "description": "Announced quantity caused by that inbound item",
            "format": "decimal",
            "example": 203.202
          }
        },
        "description": "Announced stock level details. You get the information which inbound causes which announced quantity",
        "nullable": true
      },
      "StockChange": {
        "required": [
          "changeType",
          "current",
          "merchantSku",
          "modificationInfo",
          "quantity",
          "quantityAnnounced",
          "quantityBlocked",
          "quantityReserved",
          "stockChangeId",
          "stockLevel",
          "stockLevelAnnounced",
          "stockLevelBlocked",
          "stockLevelReserved"
        ],
        "type": "object",
        "properties": {
          "stockChangeId": {
            "$ref": "#/components/schemas/StockChangeId"
          },
          "fulfillerStockChangeId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The stock change id of the fulfiller",
            "nullable": true,
            "example": "BK23004"
          },
          "stockLevel": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current stock level. This stock level is available for shipment",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelReserved": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current reserved stock level. Stock reservation is caused by outbounds",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current blocked stock level. Blocked stock is caused by the fulfiller",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelAnnounced": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current announced stock level. Announced stock is caused by inbounds",
            "format": "decimal",
            "example": 203.202
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "The available quantity which has changed in this stock change. Available quantity can be used to fulfill outbounds",
            "format": "decimal",
            "example": 203.202
          },
          "quantityReserved": {
            "uniqueItems": false,
            "type": "number",
            "description": "The reserved quantity which has changed in this stock change",
            "format": "decimal",
            "example": 203.202
          },
          "quantityBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "The blocked quantity which has changed in this stock change",
            "format": "decimal",
            "example": 203.202
          },
          "quantityAnnounced": {
            "uniqueItems": false,
            "type": "number",
            "description": "The announced quantity which has changed in this stock change",
            "format": "decimal",
            "example": 203.202
          },
          "batch": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The product batch of the stock change",
            "nullable": true,
            "example": "Elor"
          },
          "bestBefore": {
            "$ref": "#/components/schemas/BestBefore"
          },
          "changeType": {
            "$ref": "#/components/schemas/StockChangeType"
          },
          "outboundItem": {
            "$ref": "#/components/schemas/StockChangeOutboundItem"
          },
          "inboundItem": {
            "$ref": "#/components/schemas/StockChangeInboundItem"
          },
          "returnItem": {
            "$ref": "#/components/schemas/StockChangeReturnItem"
          },
          "outboundShippingNotificationItem": {
            "$ref": "#/components/schemas/StockChangeOutboundShippingNotificationItem"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the stock change. The fulfiller can use this note to inform the merchant why this stock change occured",
            "nullable": true,
            "example": "This is a custom note."
          },
          "current": {
            "uniqueItems": false,
            "type": "boolean",
            "example": false
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "merchantSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "SKU (Stock Keeping Unit) of the merchant",
            "example": "ART2394871"
          },
          "fulfillerTimestamp": {
            "uniqueItems": false,
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "description": "A change of the stock of a product",
        "nullable": true
      },
      "StockChangeId": {
        "required": [
          "jfsku",
          "stockVersion",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "stockVersion": {
            "uniqueItems": false,
            "type": "integer",
            "description": "An unique version number of the stock change. This number is ascending",
            "format": "int32",
            "example": 30220
          }
        },
        "description": "Stock change identifier",
        "nullable": true
      },
      "StockChangeInboundItem": {
        "required": [
          "inboundId"
        ],
        "type": "object",
        "properties": {
          "inboundId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "example": "MERC03INBND01"
          },
          "inboundItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "1"
          }
        },
        "nullable": true
      },
      "StockChangeOutboundItem": {
        "required": [
          "outboundId"
        ],
        "type": "object",
        "properties": {
          "outboundId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound identifier",
            "example": "MERC02AXEV"
          },
          "outboundItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound item identifier",
            "nullable": true,
            "example": "5"
          }
        },
        "description": "The outbound item that relates to this stock change",
        "nullable": true
      },
      "StockChangeOutboundShippingNotificationItem": {
        "required": [
          "outboundShippingNotificationId",
          "outboundShippingNotificationItemId"
        ],
        "type": "object",
        "properties": {
          "outboundShippingNotificationId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound shipping notification identifier",
            "example": "FULF062CMSF79GV8"
          },
          "outboundShippingNotificationItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound shipping notification item identifier",
            "example": "3"
          }
        },
        "description": "The outbound shipping notification that relates to this stock change",
        "nullable": true
      },
      "StockChangeReturnItem": {
        "type": "object",
        "properties": {
          "returnId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "MERC05SFERGF"
          },
          "returnItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "nullable": true,
            "example": "MERC05PosFDSE"
          }
        },
        "nullable": true
      },
      "StockChangeType": {
        "enum": [
          "Adjustment",
          "Inbound",
          "Delivery",
          "Return",
          "ConditionChanged",
          "Announcement",
          "AnnouncementCanceled",
          "Reservation",
          "ReservationCanceled",
          "Deleted"
        ],
        "type": "string"
      },
      "StockChangeWithProduct": {
        "required": [
          "changeType",
          "current",
          "merchantSku",
          "quantity",
          "quantityAnnounced",
          "quantityBlocked",
          "quantityReserved",
          "stockChangeId",
          "stockLevel",
          "stockLevelAnnounced",
          "stockLevelBlocked",
          "stockLevelReserved"
        ],
        "type": "object",
        "properties": {
          "stockChangeId": {
            "$ref": "#/components/schemas/StockChangeId"
          },
          "fulfillerStockChangeId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The stock change id of the fulfiller",
            "nullable": true,
            "example": "BK23004"
          },
          "stockLevel": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current stock level. This stock level is available for shipment",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelReserved": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current reserved stock level. Stock reservation is caused by outbounds",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current blocked stock level. Blocked stock is caused by the fulfiller",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelAnnounced": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current announced stock level. Announced stock is caused by inbounds",
            "format": "decimal",
            "example": 203.202
          },
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "The available quantity which has changed in this stock change. Available quantity can be used to fulfill outbounds",
            "format": "decimal",
            "example": 203.202
          },
          "quantityReserved": {
            "uniqueItems": false,
            "type": "number",
            "description": "The reserved quantity which has changed in this stock change",
            "format": "decimal",
            "example": 203.202
          },
          "quantityBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "The blocked quantity which has changed in this stock change",
            "format": "decimal",
            "example": 203.202
          },
          "quantityAnnounced": {
            "uniqueItems": false,
            "type": "number",
            "description": "The announced quantity which has changed in this stock change",
            "format": "decimal",
            "example": 203.202
          },
          "batch": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "The product batch of the stock change",
            "nullable": true,
            "example": "Elor"
          },
          "bestBefore": {
            "$ref": "#/components/schemas/BestBefore"
          },
          "changeType": {
            "$ref": "#/components/schemas/StockChangeType"
          },
          "outboundItem": {
            "$ref": "#/components/schemas/StockChangeOutboundItem"
          },
          "inboundItem": {
            "$ref": "#/components/schemas/StockChangeInboundItem"
          },
          "returnItem": {
            "$ref": "#/components/schemas/StockChangeReturnItem"
          },
          "outboundShippingNotificationItem": {
            "$ref": "#/components/schemas/StockChangeOutboundShippingNotificationItem"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the stock change. The fulfiller can use this note to inform the merchant why this stock change occured",
            "nullable": true,
            "example": "This is a custom note."
          },
          "current": {
            "uniqueItems": false,
            "type": "boolean",
            "example": false
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          },
          "merchantSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "SKU (Stock Keeping Unit) of the merchant",
            "example": "ART2394871"
          },
          "fulfillerTimestamp": {
            "uniqueItems": false,
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "description": "A change of the stock of a product",
        "nullable": true
      },
      "StockInWarehouse": {
        "required": [
          "jfsku",
          "merchantSku",
          "stockAnnouncedDetails",
          "stockLevel",
          "stockLevelAnnounced",
          "stockLevelBlocked",
          "stockLevelDetails",
          "stockLevelReserved",
          "stockReservedDetails",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "jfsku": {
            "maxLength": 11,
            "minLength": 11,
            "uniqueItems": false,
            "type": "string",
            "description": "Product identifer",
            "example": "MERC01PRDCT"
          },
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "stockLevel": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current stock level. This stock level is available for shipment",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelReserved": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current reserved stock level. Stock reservation is caused by outbounds",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelAnnounced": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current announced stock level. Announced stock is caused by inbounds",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current blocked stock level. Blocked stock is caused by the fulfiller",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelDetails": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockLevelDetail"
            },
            "description": "Stock level details itemized by batch and/or best before date"
          },
          "stockReservedDetails": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockReservedDetail"
            },
            "description": "Reserved stock level details"
          },
          "stockAnnouncedDetails": {
            "uniqueItems": false,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockAnnouncedDetail"
            },
            "description": "Announced stock level details"
          },
          "merchantSku": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "SKU (Stock Keeping Unit) of the merchant",
            "example": "ART2394871"
          },
          "fulfillerTimestamp": {
            "uniqueItems": false,
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-02T08:49:37.9090000+00:00"
          }
        },
        "description": "Stock information of a product in a specific warehouse",
        "nullable": true
      },
      "StockLevelDetail": {
        "required": [
          "stockLevel",
          "stockLevelBlocked"
        ],
        "type": "object",
        "properties": {
          "batch": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Batch of a product",
            "nullable": true,
            "example": "Elor"
          },
          "bestBefore": {
            "$ref": "#/components/schemas/BestBefore"
          },
          "stockLevel": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current stock level. This stock level is available for shipment",
            "format": "decimal",
            "example": 203.202
          },
          "stockLevelBlocked": {
            "uniqueItems": false,
            "type": "number",
            "description": "Current blocked stock level. Blocked stock is caused by the fulfiller",
            "format": "decimal",
            "example": 203.202
          }
        },
        "description": "Stock level details itemized by batch and/or best before date",
        "nullable": true
      },
      "StockReservedDetail": {
        "required": [
          "outboundId",
          "outboundItemId",
          "quantityReserved"
        ],
        "type": "object",
        "properties": {
          "outboundId": {
            "maxLength": 255,
            "minLength": 7,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound identifier",
            "example": "MERC02AXEV"
          },
          "outboundItemId": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Outbound item identifier",
            "example": "5"
          },
          "quantityReserved": {
            "uniqueItems": false,
            "type": "number",
            "description": "Reserved quantity caused by that outbound item",
            "format": "decimal",
            "example": 203.202
          }
        },
        "description": "Reserved stock level details. You get the informaton which outbound causes which reserved quantity",
        "nullable": true
      },
      "UpdateAddressRequest": {
        "type": "object",
        "properties": {
          "salutation": {
            "uniqueItems": false,
            "type": "string",
            "description": "Salutation",
            "format": "",
            "nullable": true,
            "example": "Mr"
          },
          "firstname": {
            "uniqueItems": false,
            "type": "string",
            "description": "Firstname",
            "format": "",
            "nullable": true,
            "example": "Rick"
          },
          "lastname": {
            "uniqueItems": false,
            "type": "string",
            "description": "Lastname",
            "format": "",
            "nullable": true,
            "example": "Sanchez"
          },
          "company": {
            "uniqueItems": false,
            "type": "string",
            "description": "Company",
            "format": "",
            "nullable": true,
            "example": "Rickcorp LLC"
          },
          "street": {
            "uniqueItems": false,
            "type": "string",
            "description": "Street",
            "format": "",
            "example": "Mortystreet 1"
          },
          "city": {
            "uniqueItems": false,
            "type": "string",
            "description": "City",
            "format": "",
            "example": "Mortytown"
          },
          "zip": {
            "maxLength": 255,
            "minLength": 1,
            "uniqueItems": false,
            "type": "string",
            "description": "Zip Code",
            "format": "",
            "nullable": true,
            "example": "12345"
          },
          "country": {
            "maxLength": 2,
            "minLength": 2,
            "uniqueItems": false,
            "type": "string",
            "description": "Country",
            "format": "ISO 3166 alpha-2",
            "example": "DE"
          },
          "email": {
            "uniqueItems": false,
            "type": "string",
            "description": "Email address",
            "format": "",
            "nullable": true,
            "example": "rick.sanchez@jtl-software.com"
          },
          "phone": {
            "uniqueItems": false,
            "type": "string",
            "description": "Phone number",
            "format": "",
            "nullable": true,
            "example": "+49 123456789"
          },
          "extraLine": {
            "uniqueItems": false,
            "type": "string",
            "description": "Second additional address line",
            "format": "",
            "nullable": true,
            "example": "Don't hand over to Mortys"
          },
          "extraAddressLine": {
            "uniqueItems": false,
            "type": "string",
            "description": "First additional address line",
            "format": "",
            "nullable": true,
            "example": "Behind the Shoneys"
          },
          "state": {
            "uniqueItems": false,
            "type": "string",
            "description": "State",
            "format": "",
            "nullable": true,
            "example": "Dimension C-132"
          },
          "mobile": {
            "uniqueItems": false,
            "type": "string",
            "description": "Mobile phone number",
            "format": "",
            "nullable": true,
            "example": "+49 123456789"
          },
          "fax": {
            "uniqueItems": false,
            "type": "string",
            "description": "Fax number",
            "format": "",
            "nullable": true,
            "example": "+49 123456789"
          }
        },
        "description": "Request for address modification",
        "nullable": true
      },
      "UpdateReturnItemRequest": {
        "type": "object",
        "properties": {
          "quantity": {
            "uniqueItems": false,
            "type": "number",
            "description": "Quantity of that outbound item. This quantity of that item shall be shipped to the customer",
            "format": "decimal",
            "example": 203.202
          },
          "reason": {
            "$ref": "#/components/schemas/ReturnReasonType"
          },
          "reasonNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Internal note of the outbound. This note is for the fulfiller only",
            "format": "",
            "nullable": true,
            "example": "This is a custom note."
          },
          "condition": {
            "$ref": "#/components/schemas/ConditionType"
          },
          "conditionNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Internal note of the outbound. This note is for the fulfiller only",
            "format": "",
            "nullable": true,
            "example": "This is a custom note."
          },
          "state": {
            "$ref": "#/components/schemas/ReturnType"
          }
        },
        "nullable": true
      },
      "UpdateReturnRequest": {
        "type": "object",
        "properties": {
          "warehouseId": {
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse must be from the fulfiller who delivered the outbound",
            "format": "",
            "example": "FULF04XX-12345-0001"
          },
          "fulfillerReturnNumber": {
            "uniqueItems": false,
            "type": "string",
            "format": "",
            "example": "string"
          },
          "internalNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Internal note of the outbound. This note is for the fulfiller only",
            "format": "",
            "example": "This is a custom note."
          },
          "customerAddress": {
            "$ref": "#/components/schemas/UpdateAddressRequest"
          },
          "externalNote": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "External note of the outbound. This note can be shown to the customer who will receive the shipment",
            "format": "",
            "example": "This is a custom note."
          },
          "contact": {
            "uniqueItems": false,
            "type": "string",
            "format": "",
            "nullable": true,
            "example": "string"
          }
        },
        "description": "Update return information",
        "nullable": true
      },
      "UpdateShippingMethodRequest": {
        "type": "object",
        "properties": {
          "name": {
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the shipping method",
            "format": "",
            "example": "DHL package"
          },
          "trackingUrlSchema": {
            "uniqueItems": false,
            "type": "string",
            "description": "Tracking URL schema for dynamic tracking URL creation",
            "format": "",
            "nullable": true,
            "example": "http://nolp.dhl.de/nextt-online-public/set_identcodes.do?lang=de&idc=#TrackingId#"
          },
          "carrierCode": {
            "uniqueItems": false,
            "type": "string",
            "description": "Carrier Code of the shipping method",
            "format": "",
            "nullable": true,
            "example": "DHL service"
          },
          "carrierName": {
            "uniqueItems": false,
            "type": "string",
            "description": "Carrier name of the shipping method",
            "format": "",
            "nullable": true,
            "example": "DHL"
          },
          "note": {
            "maxLength": 4096,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Note of the shipping method",
            "format": "",
            "nullable": true,
            "example": "This is a custom note."
          },
          "cutoffTime": {
            "uniqueItems": false,
            "type": "string",
            "description": "Cut off time of the shipping method. The cut off time is the lastest time an outbound can arrive at Fulfillment Network so that the outbound will be shipped and handed over to the carrier",
            "format": "",
            "nullable": true,
            "example": "14:00"
          }
        },
        "nullable": true
      },
      "UpdateWarehouseRequest": {
        "type": "object",
        "properties": {
          "name": {
            "uniqueItems": false,
            "type": "string",
            "description": "The new name of the warehouse",
            "format": "",
            "example": "Garage laboratory"
          },
          "address": {
            "$ref": "#/components/schemas/UpdateAddressRequest"
          }
        },
        "description": "Updates information of an existing warehouse",
        "nullable": true
      },
      "Warehouse": {
        "required": [
          "address",
          "fulfillerId",
          "modificationInfo",
          "name",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "fulfillerId": {
            "maxLength": 4,
            "minLength": 4,
            "uniqueItems": false,
            "type": "string",
            "description": "Id of the fulfiller",
            "example": "FULF"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "uniqueItems": false,
            "type": "string",
            "description": "Name of the warehouse",
            "example": "Garage laboratory"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "modificationInfo": {
            "$ref": "#/components/schemas/ModificationInfo"
          }
        },
        "description": "A warehouse where your want to store products of your merchants",
        "nullable": true
      },
      "WarehouseAuthorization": {
        "required": [
          "createdAt",
          "shippingMethods",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "createdAt": {
            "uniqueItems": false,
            "type": "string",
            "format": "date-time",
            "example": "2020-03-02T08:49:37.9090000+00:00"
          },
          "shippingMethods": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizedShippingMethod"
            },
            "description": "List of shipping methods you provide your merchant in that warehouse"
          }
        },
        "description": "This warehouse and it's assigned shipping methods can be used by your merchant",
        "nullable": true
      },
      "WarehouseAuthorizationRequest": {
        "required": [
          "shippingMethods",
          "warehouseId"
        ],
        "type": "object",
        "properties": {
          "warehouseId": {
            "maxLength": 255,
            "minLength": 14,
            "uniqueItems": false,
            "type": "string",
            "description": "Warehouse identifier",
            "example": "FULF04XX-12345-0001"
          },
          "shippingMethods": {
            "minLength": 1,
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAuthorizedShippingMethodRequest"
            },
            "description": "List of shipping methods you want to provide in that warehouse"
          }
        },
        "description": "This warehouse and it's assigned shipping methods that shall be used by your merchant",
        "nullable": true
      }
    }
  },
  "tags": [
    {
      "name": "Warehouses",
      "description": "Manage your warehouses"
    },
    {
      "name": "Stocks",
      "description": "Manage processes regarding stocks"
    },
    {
      "name": "ShippingMethods",
      "description": "Manage shipping methods that can be used fulfilling outbounds. Your merchants can specify shipping methods in outbounds to tell you how to ship the outbound."
    },
    {
      "name": "Returns",
      "description": "<p data-section-id=\"tag/Returns\" class=\"beta_summary\" />Manage your returns"
    },
    {
      "name": "Products",
      "description": "Manage products of your merchants"
    },
    {
      "name": "Outbounds",
      "description": "Manage processes regarding outbounds. Outbounds are orders that you have to fulfill from your warehouse"
    },
    {
      "name": "Merchants",
      "description": "Provides information about your authorized merchants"
    },
    {
      "name": "Inbounds",
      "description": "Manage processes regarding item arrival at your warehouses"
    },
    {
      "name": "Authorizations",
      "description": "Manage merchant and warehouse authorizations"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Endpoints",
      "tags": [
        "Authorizations",
        "Inbounds",
        "Merchants",
        "Outbounds",
        "Products",
        "Returns",
        "ShippingMethods",
        "Stocks",
        "Warehouses"
      ]
    }
  ]
}